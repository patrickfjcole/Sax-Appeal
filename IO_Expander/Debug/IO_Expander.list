
IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ac  080086ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080086ac  080086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086b4  080086b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080086bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d64  20000010  080086cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d74  080086cc  00024d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5c8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000313a  00000000  00000000  0003a608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  0003d748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032ff  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010ffc  00000000  00000000  0004331f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6efc  00000000  00000000  0005431b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005908  00000000  00000000  0012b294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800860c 	.word	0x0800860c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800860c 	.word	0x0800860c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <StartInputTask>:
uint32_t freq; //for synthesizer
uint32_t note; // for MIDI

//GPININT enable

void StartInputTask(void *argument) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = { GPINTEN_ADDR, 0xFF };
 80004d8:	2302      	movs	r3, #2
 80004da:	733b      	strb	r3, [r7, #12]
 80004dc:	23ff      	movs	r3, #255	; 0xff
 80004de:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BTN_ADDR, buf, 2, HAL_MAX_DELAY);
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	b299      	uxth	r1, r3
 80004e4:	f107 020c 	add.w	r2, r7, #12
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2302      	movs	r3, #2
 80004f0:	4818      	ldr	r0, [pc, #96]	; (8000554 <StartInputTask+0x84>)
 80004f2:	f001 fe57 	bl	80021a4 <HAL_I2C_Master_Transmit>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <StartInputTask+0x88>)
 80004fc:	701a      	strb	r2, [r3, #0]

	buf[0] = REG_BTN;
 80004fe:	2309      	movs	r3, #9
 8000500:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BTN_ADDR, buf, 1, HAL_MAX_DELAY);
 8000502:	2340      	movs	r3, #64	; 0x40
 8000504:	b299      	uxth	r1, r3
 8000506:	f107 020c 	add.w	r2, r7, #12
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <StartInputTask+0x84>)
 8000514:	f001 fe46 	bl	80021a4 <HAL_I2C_Master_Transmit>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <StartInputTask+0x88>)
 800051e:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Receive(&hi2c1, BTN_ADDR, buf, 1, HAL_MAX_DELAY);
 8000520:	2340      	movs	r3, #64	; 0x40
 8000522:	b299      	uxth	r1, r3
 8000524:	f107 020c 	add.w	r2, r7, #12
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	4808      	ldr	r0, [pc, #32]	; (8000554 <StartInputTask+0x84>)
 8000532:	f001 ff35 	bl	80023a0 <HAL_I2C_Master_Receive>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <StartInputTask+0x88>)
 800053c:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(InputSemaphoreHandle, 2000U);
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <StartInputTask+0x8c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 ffbc 	bl	80054c4 <osSemaphoreAcquire>
		ButtonUpdate();
 800054c:	f000 f808 	bl	8000560 <ButtonUpdate>
		osSemaphoreAcquire(InputSemaphoreHandle, 2000U);
 8000550:	e7f5      	b.n	800053e <StartInputTask+0x6e>
 8000552:	bf00      	nop
 8000554:	2000498c 	.word	0x2000498c
 8000558:	2000493c 	.word	0x2000493c
 800055c:	20004940 	.word	0x20004940

08000560 <ButtonUpdate>:

	}
}

//Frequency
static void ButtonUpdate(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af02      	add	r7, sp, #8

	uint8_t buf[2] = { GPINTEN_ADDR, 0xFF };
 8000566:	2302      	movs	r3, #2
 8000568:	733b      	strb	r3, [r7, #12]
 800056a:	23ff      	movs	r3, #255	; 0xff
 800056c:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BTN_ADDR, buf, 1, HAL_MAX_DELAY);
 800056e:	2340      	movs	r3, #64	; 0x40
 8000570:	b299      	uxth	r1, r3
 8000572:	f107 020c 	add.w	r2, r7, #12
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2301      	movs	r3, #1
 800057e:	4857      	ldr	r0, [pc, #348]	; (80006dc <ButtonUpdate+0x17c>)
 8000580:	f001 fe10 	bl	80021a4 <HAL_I2C_Master_Transmit>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <ButtonUpdate+0x180>)
 800058a:	701a      	strb	r2, [r3, #0]

	if (ret != HAL_OK) {
 800058c:	4b54      	ldr	r3, [pc, #336]	; (80006e0 <ButtonUpdate+0x180>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d137      	bne.n	8000604 <ButtonUpdate+0xa4>

	} else {
		ret = HAL_I2C_Master_Receive(&hi2c1, BTN_ADDR, buf, 1,
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	b299      	uxth	r1, r3
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	484d      	ldr	r0, [pc, #308]	; (80006dc <ButtonUpdate+0x17c>)
 80005a6:	f001 fefb 	bl	80023a0 <HAL_I2C_Master_Receive>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b4c      	ldr	r3, [pc, #304]	; (80006e0 <ButtonUpdate+0x180>)
 80005b0:	701a      	strb	r2, [r3, #0]
		HAL_MAX_DELAY);
		if (ret != HAL_OK) {
 80005b2:	4b4b      	ldr	r3, [pc, #300]	; (80006e0 <ButtonUpdate+0x180>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d124      	bne.n	8000604 <ButtonUpdate+0xa4>

		} else {

			buf[0] = ~buf[0];
 80005ba:	7b3b      	ldrb	r3, [r7, #12]
 80005bc:	43db      	mvns	r3, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	733b      	strb	r3, [r7, #12]

			//CONVERTING TO 8 BIT BINARY
			uint8_t btn[8];
			uint8_t btnRaw = buf[0];
 80005c2:	7b3b      	ldrb	r3, [r7, #12]
 80005c4:	75fb      	strb	r3, [r7, #23]

			uint8_t mask = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	77fb      	strb	r3, [r7, #31]

			for (int i = 0; i < 8; i++) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	e016      	b.n	80005fe <ButtonUpdate+0x9e>
				if (btnRaw & mask) {
 80005d0:	7dfa      	ldrb	r2, [r7, #23]
 80005d2:	7ffb      	ldrb	r3, [r7, #31]
 80005d4:	4013      	ands	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <ButtonUpdate+0x88>
					btn[i] = 1;
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	4413      	add	r3, r2
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e007      	b.n	80005f8 <ButtonUpdate+0x98>
				} else {
					btn[i] = 0;
 80005e8:	1d3a      	adds	r2, r7, #4
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	4413      	add	r3, r2
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
					mask = mask * 2;  //initially << 1
 80005f2:	7ffb      	ldrb	r3, [r7, #31]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	77fb      	strb	r3, [r7, #31]
			for (int i = 0; i < 8; i++) {
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	3301      	adds	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	2b07      	cmp	r3, #7
 8000602:	dde5      	ble.n	80005d0 <ButtonUpdate+0x70>
				}
			}
		}

	}
	uint32_t b = buf[0];
 8000604:	7b3b      	ldrb	r3, [r7, #12]
 8000606:	613b      	str	r3, [r7, #16]
	if (b & 0x01) {
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <ButtonUpdate+0xc0>
		freq = 196000;
 8000612:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <ButtonUpdate+0x184>)
 8000614:	4a34      	ldr	r2, [pc, #208]	; (80006e8 <ButtonUpdate+0x188>)
 8000616:	601a      	str	r2, [r3, #0]
		note = 67;
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <ButtonUpdate+0x18c>)
 800061a:	2243      	movs	r2, #67	; 0x43
 800061c:	601a      	str	r2, [r3, #0]
	} else {
		freq = 440000;
		note = 81;
	}

}
 800061e:	e059      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x02) {
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <ButtonUpdate+0xd8>
		freq = 220000;
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <ButtonUpdate+0x184>)
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <ButtonUpdate+0x190>)
 800062e:	601a      	str	r2, [r3, #0]
		note = 69;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <ButtonUpdate+0x18c>)
 8000632:	2245      	movs	r2, #69	; 0x45
 8000634:	601a      	str	r2, [r3, #0]
}
 8000636:	e04d      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x04) {
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <ButtonUpdate+0xf0>
		freq = 246940;
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <ButtonUpdate+0x184>)
 8000644:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <ButtonUpdate+0x194>)
 8000646:	601a      	str	r2, [r3, #0]
		note = 71;
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <ButtonUpdate+0x18c>)
 800064a:	2247      	movs	r2, #71	; 0x47
 800064c:	601a      	str	r2, [r3, #0]
}
 800064e:	e041      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x08) {
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <ButtonUpdate+0x108>
		freq = 261630;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <ButtonUpdate+0x184>)
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <ButtonUpdate+0x198>)
 800065e:	601a      	str	r2, [r3, #0]
		note = 72;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <ButtonUpdate+0x18c>)
 8000662:	2248      	movs	r2, #72	; 0x48
 8000664:	601a      	str	r2, [r3, #0]
}
 8000666:	e035      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x10) {
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	f003 0310 	and.w	r3, r3, #16
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <ButtonUpdate+0x120>
		freq = 293660;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <ButtonUpdate+0x184>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <ButtonUpdate+0x19c>)
 8000676:	601a      	str	r2, [r3, #0]
		note = 74;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <ButtonUpdate+0x18c>)
 800067a:	224a      	movs	r2, #74	; 0x4a
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	e029      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x20) {
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <ButtonUpdate+0x138>
		freq = 329630;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <ButtonUpdate+0x184>)
 800068c:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <ButtonUpdate+0x1a0>)
 800068e:	601a      	str	r2, [r3, #0]
		note = 76;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <ButtonUpdate+0x18c>)
 8000692:	224c      	movs	r2, #76	; 0x4c
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	e01d      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x40) {
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d006      	beq.n	80006b0 <ButtonUpdate+0x150>
		freq = 349230;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <ButtonUpdate+0x184>)
 80006a4:	4a17      	ldr	r2, [pc, #92]	; (8000704 <ButtonUpdate+0x1a4>)
 80006a6:	601a      	str	r2, [r3, #0]
		note = 77;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <ButtonUpdate+0x18c>)
 80006aa:	224d      	movs	r2, #77	; 0x4d
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	e011      	b.n	80006d4 <ButtonUpdate+0x174>
	} else if (b & 0x80) {
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <ButtonUpdate+0x168>
		freq = 392000;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <ButtonUpdate+0x184>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <ButtonUpdate+0x1a8>)
 80006be:	601a      	str	r2, [r3, #0]
		note = 79;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <ButtonUpdate+0x18c>)
 80006c2:	224f      	movs	r2, #79	; 0x4f
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	e005      	b.n	80006d4 <ButtonUpdate+0x174>
		freq = 440000;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <ButtonUpdate+0x184>)
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <ButtonUpdate+0x1ac>)
 80006cc:	601a      	str	r2, [r3, #0]
		note = 81;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <ButtonUpdate+0x18c>)
 80006d0:	2251      	movs	r2, #81	; 0x51
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000498c 	.word	0x2000498c
 80006e0:	2000493c 	.word	0x2000493c
 80006e4:	20004934 	.word	0x20004934
 80006e8:	0002fda0 	.word	0x0002fda0
 80006ec:	20004938 	.word	0x20004938
 80006f0:	00035b60 	.word	0x00035b60
 80006f4:	0003c49c 	.word	0x0003c49c
 80006f8:	0003fdfe 	.word	0x0003fdfe
 80006fc:	00047b1c 	.word	0x00047b1c
 8000700:	0005079e 	.word	0x0005079e
 8000704:	0005542e 	.word	0x0005542e
 8000708:	0005fb40 	.word	0x0005fb40
 800070c:	0006b6c0 	.word	0x0006b6c0

08000710 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
	osSemaphoreRelease(InputSemaphoreHandle);
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <HAL_GPIO_EXTI_Callback+0x1c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f004 ff36 	bl	8005590 <osSemaphoreRelease>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20004940 	.word	0x20004940

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fb94 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f828 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f932 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000740:	f000 f910 	bl	8000964 <MX_DMA_Init>
  MX_ADC2_Init();
 8000744:	f000 f880 	bl	8000848 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000748:	f000 f8de 	bl	8000908 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	//HAL_ADC_Start_DMA(&hadc2, FR, 2);
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800074c:	f004 fd0a 	bl	8005164 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of InputSemaphore */
  InputSemaphoreHandle = osSemaphoreNew(1, 1, &InputSemaphore_attributes);
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <main+0x48>)
 8000752:	2101      	movs	r1, #1
 8000754:	2001      	movs	r0, #1
 8000756:	f004 fe17 	bl	8005388 <osSemaphoreNew>
 800075a:	4602      	mov	r2, r0
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <main+0x4c>)
 800075e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of inputTask */
  inputTaskHandle = osThreadNew(StartInputTask, NULL, &inputTask_attributes);
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <main+0x50>)
 8000762:	2100      	movs	r1, #0
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <main+0x54>)
 8000766:	f004 fd65 	bl	8005234 <osThreadNew>
 800076a:	4602      	mov	r2, r0
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <main+0x58>)
 800076e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000770:	f004 fd2c 	bl	80051cc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x44>
 8000776:	bf00      	nop
 8000778:	0800867c 	.word	0x0800867c
 800077c:	20004940 	.word	0x20004940
 8000780:	08008658 	.word	0x08008658
 8000784:	080004d1 	.word	0x080004d1
 8000788:	20004c30 	.word	0x20004c30

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f007 ff2d 	bl	80085fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xb4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemClock_Config+0xb4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <SystemClock_Config+0xb4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <SystemClock_Config+0xb8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <SystemClock_Config+0xb8>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <SystemClock_Config+0xb8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fe19 	bl	8004434 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000808:	f000 f957 	bl	8000aba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 f874 	bl	8004914 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000832:	f000 f942 	bl	8000aba <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_ADC2_Init+0xb4>)
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_ADC2_Init+0xb8>)
 800085e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_ADC2_Init+0xb4>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_ADC2_Init+0xb4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_ADC2_Init+0xb4>)
 800086e:	2201      	movs	r2, #1
 8000870:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_ADC2_Init+0xb4>)
 8000874:	2201      	movs	r2, #1
 8000876:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_ADC2_Init+0xb4>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_ADC2_Init+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_ADC2_Init+0xb4>)
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_ADC2_Init+0xbc>)
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_ADC2_Init+0xb4>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_ADC2_Init+0xb4>)
 8000894:	2202      	movs	r2, #2
 8000896:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_ADC2_Init+0xb4>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_ADC2_Init+0xb4>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008a6:	4815      	ldr	r0, [pc, #84]	; (80008fc <MX_ADC2_Init+0xb4>)
 80008a8:	f000 fb1c 	bl	8000ee4 <HAL_ADC_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f902 	bl	8000aba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80008be:	2306      	movs	r3, #6
 80008c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_ADC2_Init+0xb4>)
 80008c8:	f000 fb50 	bl	8000f6c <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008d2:	f000 f8f2 	bl	8000aba <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_ADC2_Init+0xb4>)
 80008e4:	f000 fb42 	bl	8000f6c <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80008ee:	f000 f8e4 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20004944 	.word	0x20004944
 8000900:	40012100 	.word	0x40012100
 8000904:	0f000001 	.word	0x0f000001

08000908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_I2C1_Init+0x50>)
 800090e:	4a13      	ldr	r2, [pc, #76]	; (800095c <MX_I2C1_Init+0x54>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_I2C1_Init+0x50>)
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <MX_I2C1_Init+0x58>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_I2C1_Init+0x50>)
 8000926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800092a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_I2C1_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_I2C1_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_I2C1_Init+0x50>)
 8000946:	f001 faf5 	bl	8001f34 <HAL_I2C_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000950:	f000 f8b3 	bl	8000aba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000498c 	.word	0x2000498c
 800095c:	40005400 	.word	0x40005400
 8000960:	000186a0 	.word	0x000186a0

08000964 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_DMA_Init+0x3c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <MX_DMA_Init+0x3c>)
 8000974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_DMA_Init+0x3c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2105      	movs	r1, #5
 800098a:	203a      	movs	r0, #58	; 0x3a
 800098c:	f000 fdc4 	bl	8001518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000990:	203a      	movs	r0, #58	; 0x3a
 8000992:	f000 fddd 	bl	8001550 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xe8>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xe8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Ymax_Pin|Ymin_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	21c0      	movs	r1, #192	; 0xc0
 8000a12:	481f      	ldr	r0, [pc, #124]	; (8000a90 <MX_GPIO_Init+0xec>)
 8000a14:	f001 fa5c 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Xmax_Pin|Xmin_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2118      	movs	r1, #24
 8000a1c:	481d      	ldr	r0, [pc, #116]	; (8000a94 <MX_GPIO_Init+0xf0>)
 8000a1e:	f001 fa57 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Ymax_Pin Ymin_Pin */
  GPIO_InitStruct.Pin = Ymax_Pin|Ymin_Pin;
 8000a22:	23c0      	movs	r3, #192	; 0xc0
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0xec>)
 8000a3a:	f001 f8af 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Xmax_Pin Xmin_Pin */
  GPIO_InitStruct.Pin = Xmax_Pin|Xmin_Pin;
 8000a3e:	2318      	movs	r3, #24
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_GPIO_Init+0xf0>)
 8000a56:	f001 f8a1 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_GPIO_Init+0xf4>)
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_GPIO_Init+0xf0>)
 8000a6e:	f001 f895 	bl	8001b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2017      	movs	r0, #23
 8000a78:	f000 fd4e 	bl	8001518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a7c:	2017      	movs	r0, #23
 8000a7e:	f000 fd67 	bl	8001550 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020400 	.word	0x40020400
 8000a98:	10210000 	.word	0x10210000

08000a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aae:	f000 f9f9 	bl	8000ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_MspInit+0x54>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a11      	ldr	r2, [pc, #68]	; (8000b1c <HAL_MspInit+0x54>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x54>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_MspInit+0x54>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_MspInit+0x54>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_MspInit+0x54>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	f06f 0001 	mvn.w	r0, #1
 8000b0e:	f000 fd03 	bl	8001518 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <HAL_ADC_MspInit+0xdc>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d158      	bne.n	8000bf4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_ADC_MspInit+0xe0>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a2d      	ldr	r2, [pc, #180]	; (8000c00 <HAL_ADC_MspInit+0xe0>)
 8000b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <HAL_ADC_MspInit+0xe0>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_ADC_MspInit+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <HAL_ADC_MspInit+0xe0>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_ADC_MspInit+0xe0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481d      	ldr	r0, [pc, #116]	; (8000c04 <HAL_ADC_MspInit+0xe4>)
 8000b8e:	f001 f805 	bl	8001b9c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <HAL_ADC_MspInit+0xec>)
 8000b96:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b9e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bca:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bda:	f000 fcc7 	bl	800156c <HAL_DMA_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000be4:	f7ff ff69 	bl	8000aba <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bec:	639a      	str	r2, [r3, #56]	; 0x38
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_ADC_MspInit+0xe8>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40012100 	.word	0x40012100
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	20004c90 	.word	0x20004c90
 8000c0c:	40026440 	.word	0x40026440

08000c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_I2C_MspInit+0x94>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d133      	bne.n	8000c9a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_I2C_MspInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_I2C_MspInit+0x98>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0x98>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23c0      	movs	r3, #192	; 0xc0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c52:	2312      	movs	r3, #18
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4810      	ldr	r0, [pc, #64]	; (8000cac <HAL_I2C_MspInit+0x9c>)
 8000c6a:	f000 ff97 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_I2C_MspInit+0x98>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_I2C_MspInit+0x98>)
 8000c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_I2C_MspInit+0x98>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	201f      	movs	r0, #31
 8000c90:	f000 fc42 	bl	8001518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c94:	201f      	movs	r0, #31
 8000c96:	f000 fc5b 	bl	8001550 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f000 fc27 	bl	8001518 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 fc40 	bl	8001550 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_InitTick+0xa4>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_InitTick+0xa4>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_InitTick+0xa4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cec:	f107 0210 	add.w	r2, r7, #16
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 ffc4 	bl	8004c84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cfc:	f003 ffae 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8000d00:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0xac>)
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_InitTick+0xac>)
 8000d1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_InitTick+0xac>)
 8000d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d24:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_InitTick+0xac>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_InitTick+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000d32:	480a      	ldr	r0, [pc, #40]	; (8000d5c <HAL_InitTick+0xac>)
 8000d34:	f003 ffd8 	bl	8004ce8 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <HAL_InitTick+0xac>)
 8000d40:	f004 f807 	bl	8004d52 <HAL_TIM_Base_Start_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	e000      	b.n	8000d4a <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3730      	adds	r7, #48	; 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	20004cf0 	.word	0x20004cf0

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d98:	2020      	movs	r0, #32
 8000d9a:	f001 f8b3 	bl	8001f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM2_IRQHandler+0x10>)
 8000daa:	f003 fff6 	bl	8004d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20004cf0 	.word	0x20004cf0

08000db8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <I2C1_EV_IRQHandler+0x10>)
 8000dbe:	f001 fd15 	bl	80027ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000498c 	.word	0x2000498c

08000dcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA2_Stream2_IRQHandler+0x10>)
 8000dd2:	f000 fc9b 	bl	800170c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20004c90 	.word	0x20004c90

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SystemInit+0x28>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SystemInit+0x28>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SystemInit+0x28>)
 8000df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e12:	e003      	b.n	8000e1c <LoopCopyDataInit>

08000e14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e1a:	3104      	adds	r1, #4

08000e1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e24:	d3f6      	bcc.n	8000e14 <CopyDataInit>
  ldr  r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e28:	e002      	b.n	8000e30 <LoopFillZerobss>

08000e2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e2c:	f842 3b04 	str.w	r3, [r2], #4

08000e30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e34:	d3f9      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd3 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f007 fbaf 	bl	800859c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fc77 	bl	8000730 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e48:	080086bc 	.word	0x080086bc
  ldr  r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e50:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e54:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e58:	20004d74 	.word	0x20004d74

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 fb3a 	bl	8001502 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff ff0e 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe18 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20004d30 	.word	0x20004d30

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20004d30 	.word	0x20004d30

08000ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e033      	b.n	8000f62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff fe0c 	bl	8000b20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d118      	bne.n	8000f54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2a:	f023 0302 	bic.w	r3, r3, #2
 8000f2e:	f043 0202 	orr.w	r2, r3, #2
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f93a 	bl	80011b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f023 0303 	bic.w	r3, r3, #3
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
 8000f52:	e001      	b.n	8000f58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_ADC_ConfigChannel+0x1c>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e105      	b.n	8001194 <HAL_ADC_ConfigChannel+0x228>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d925      	bls.n	8000fe4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68d9      	ldr	r1, [r3, #12]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	3b1e      	subs	r3, #30
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	400a      	ands	r2, r1
 8000fbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4403      	add	r3, r0
 8000fd6:	3b1e      	subs	r3, #30
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	e022      	b.n	800102a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6919      	ldr	r1, [r3, #16]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	400a      	ands	r2, r1
 8001006:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6919      	ldr	r1, [r3, #16]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	4603      	mov	r3, r0
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4403      	add	r3, r0
 8001020:	409a      	lsls	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b06      	cmp	r3, #6
 8001030:	d824      	bhi.n	800107c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	3b05      	subs	r3, #5
 8001044:	221f      	movs	r2, #31
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	3b05      	subs	r3, #5
 800106e:	fa00 f203 	lsl.w	r2, r0, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
 800107a:	e04c      	b.n	8001116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b0c      	cmp	r3, #12
 8001082:	d824      	bhi.n	80010ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	3b23      	subs	r3, #35	; 0x23
 8001096:	221f      	movs	r2, #31
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43da      	mvns	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	400a      	ands	r2, r1
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b23      	subs	r3, #35	; 0x23
 80010c0:	fa00 f203 	lsl.w	r2, r0, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
 80010cc:	e023      	b.n	8001116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b41      	subs	r3, #65	; 0x41
 80010e0:	221f      	movs	r2, #31
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	400a      	ands	r2, r1
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	3b41      	subs	r3, #65	; 0x41
 800110a:	fa00 f203 	lsl.w	r2, r0, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <HAL_ADC_ConfigChannel+0x234>)
 8001118:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_ADC_ConfigChannel+0x238>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d109      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b12      	cmp	r3, #18
 800112a:	d105      	bne.n	8001138 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_ADC_ConfigChannel+0x238>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d123      	bne.n	800118a <HAL_ADC_ConfigChannel+0x21e>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d003      	beq.n	8001152 <HAL_ADC_ConfigChannel+0x1e6>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b11      	cmp	r3, #17
 8001150:	d11b      	bne.n	800118a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b10      	cmp	r3, #16
 8001164:	d111      	bne.n	800118a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_ADC_ConfigChannel+0x240>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9a      	lsrs	r2, r3, #18
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800117c:	e002      	b.n	8001184 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3b01      	subs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f9      	bne.n	800117e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40012300 	.word	0x40012300
 80011a4:	40012000 	.word	0x40012000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011b8:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <ADC_Init+0x1f0>)
 80011ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	021a      	lsls	r2, r3, #8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800122a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6899      	ldr	r1, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <ADC_Init+0x1f4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d022      	beq.n	800128e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001256:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6899      	ldr	r1, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6899      	ldr	r1, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e00f      	b.n	80012ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800129c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0202 	bic.w	r2, r2, #2
 80012bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	005a      	lsls	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	3b01      	subs	r3, #1
 8001308:	035a      	lsls	r2, r3, #13
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	e007      	b.n	8001324 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001322:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	3b01      	subs	r3, #1
 8001340:	051a      	lsls	r2, r3, #20
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6899      	ldr	r1, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001366:	025a      	lsls	r2, r3, #9
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800137e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6899      	ldr	r1, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	029a      	lsls	r2, r3, #10
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40012300 	.word	0x40012300
 80013a4:	0f000001 	.word	0x0f000001

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff4c 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152a:	f7ff ff61 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 800152e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7ff ffb1 	bl	800149c <NVIC_EncodePriority>
 800153a:	4602      	mov	r2, r0
 800153c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff80 	bl	8001448 <__NVIC_SetPriority>
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff54 	bl	800140c <__NVIC_EnableIRQ>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff fca8 	bl	8000ecc <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e099      	b.n	80016bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a8:	e00f      	b.n	80015ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015aa:	f7ff fc8f 	bl	8000ecc <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d908      	bls.n	80015ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2203      	movs	r2, #3
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e078      	b.n	80016bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1e8      	bne.n	80015aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_DMA_Init+0x158>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	2b04      	cmp	r3, #4
 8001622:	d107      	bne.n	8001634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4313      	orrs	r3, r2
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f023 0307 	bic.w	r3, r3, #7
 800164a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	2b04      	cmp	r3, #4
 800165c:	d117      	bne.n	800168e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4313      	orrs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00e      	beq.n	800168e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fa19 	bl	8001aa8 <DMA_CheckFifoParam>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800168a:	2301      	movs	r3, #1
 800168c:	e016      	b.n	80016bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f9d0 	bl	8001a3c <DMA_CalcBaseAndBitshift>
 800169c:	4603      	mov	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	223f      	movs	r2, #63	; 0x3f
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	f010803f 	.word	0xf010803f

080016c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d004      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00c      	b.n	8001700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2205      	movs	r2, #5
 80016ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001718:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_DMA_IRQHandler+0x258>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a92      	ldr	r2, [pc, #584]	; (8001968 <HAL_DMA_IRQHandler+0x25c>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	2208      	movs	r2, #8
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01a      	beq.n	8001778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d013      	beq.n	8001778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	2208      	movs	r2, #8
 8001766:	409a      	lsls	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	2201      	movs	r2, #1
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d012      	beq.n	80017ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a6:	f043 0202 	orr.w	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b2:	2204      	movs	r2, #4
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d012      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	2204      	movs	r2, #4
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f043 0204 	orr.w	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2210      	movs	r2, #16
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d043      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03c      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2210      	movs	r2, #16
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d018      	beq.n	800184e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d024      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e01f      	b.n	800187c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
 800184c:	e016      	b.n	800187c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0208 	bic.w	r2, r2, #8
 800186a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	2220      	movs	r2, #32
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 808e 	beq.w	80019aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8086 	beq.w	80019aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2220      	movs	r2, #32
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d136      	bne.n	8001924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0216 	bic.w	r2, r2, #22
 80018c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <HAL_DMA_IRQHandler+0x1da>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0208 	bic.w	r2, r2, #8
 80018f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	223f      	movs	r2, #63	; 0x3f
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001916:	2b00      	cmp	r3, #0
 8001918:	d07d      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
        }
        return;
 8001922:	e078      	b.n	8001a16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01c      	beq.n	800196c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d108      	bne.n	8001952 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	2b00      	cmp	r3, #0
 8001946:	d030      	beq.n	80019aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
 8001950:	e02b      	b.n	80019aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d027      	beq.n	80019aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
 8001962:	e022      	b.n	80019aa <HAL_DMA_IRQHandler+0x29e>
 8001964:	20000000 	.word	0x20000000
 8001968:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0210 	bic.w	r2, r2, #16
 8001988:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d032      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d022      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2205      	movs	r2, #5
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3301      	adds	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d307      	bcc.n	80019f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f2      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x2ca>
 80019f0:	e000      	b.n	80019f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
 8001a14:	e000      	b.n	8001a18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a16:	bf00      	nop
    }
  }
}
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop

08001a20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2e:	b2db      	uxtb	r3, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3b10      	subs	r3, #16
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <DMA_CalcBaseAndBitshift+0x64>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a56:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <DMA_CalcBaseAndBitshift+0x68>)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d909      	bls.n	8001a7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	1d1a      	adds	r2, r3, #4
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a7c:	e007      	b.n	8001a8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	aaaaaaab 	.word	0xaaaaaaab
 8001aa4:	080086a4 	.word	0x080086a4

08001aa8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11f      	bne.n	8001b02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d855      	bhi.n	8001b74 <DMA_CheckFifoParam+0xcc>
 8001ac8:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <DMA_CheckFifoParam+0x28>)
 8001aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ace:	bf00      	nop
 8001ad0:	08001ae1 	.word	0x08001ae1
 8001ad4:	08001af3 	.word	0x08001af3
 8001ad8:	08001ae1 	.word	0x08001ae1
 8001adc:	08001b75 	.word	0x08001b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d045      	beq.n	8001b78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af0:	e042      	b.n	8001b78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001afa:	d13f      	bne.n	8001b7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b00:	e03c      	b.n	8001b7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b0a:	d121      	bne.n	8001b50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d836      	bhi.n	8001b80 <DMA_CheckFifoParam+0xd8>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <DMA_CheckFifoParam+0x70>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b2f 	.word	0x08001b2f
 8001b20:	08001b29 	.word	0x08001b29
 8001b24:	08001b41 	.word	0x08001b41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b2c:	e02f      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d024      	beq.n	8001b84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b3e:	e021      	b.n	8001b84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b48:	d11e      	bne.n	8001b88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b4e:	e01b      	b.n	8001b88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d902      	bls.n	8001b5c <DMA_CheckFifoParam+0xb4>
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d003      	beq.n	8001b62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b5a:	e018      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b60:	e015      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
      break;
 8001b72:	e00b      	b.n	8001b8c <DMA_CheckFifoParam+0xe4>
      break;
 8001b74:	bf00      	nop
 8001b76:	e00a      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      break;
 8001b78:	bf00      	nop
 8001b7a:	e008      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      break;
 8001b7c:	bf00      	nop
 8001b7e:	e006      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      break;
 8001b80:	bf00      	nop
 8001b82:	e004      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      break;
 8001b84:	bf00      	nop
 8001b86:	e002      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      break;   
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <DMA_CheckFifoParam+0xe6>
      break;
 8001b8c:	bf00      	nop
    }
  } 
  
  return status; 
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e16b      	b.n	8001e90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 815a 	bne.w	8001e8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_GPIO_Init+0x5a>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bea:	2b11      	cmp	r3, #17
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b12      	cmp	r3, #18
 8001bf4:	d130      	bne.n	8001c58 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 0201 	and.w	r2, r3, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0xfc>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d123      	bne.n	8001ce0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80b4 	beq.w	8001e8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_GPIO_Init+0x308>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ea4 <HAL_GPIO_Init+0x308>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_GPIO_Init+0x308>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_GPIO_Init+0x310>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a50      	ldr	r2, [pc, #320]	; (8001eb0 <HAL_GPIO_Init+0x314>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x222>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4f      	ldr	r2, [pc, #316]	; (8001eb4 <HAL_GPIO_Init+0x318>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x21e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_GPIO_Init+0x31c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4d      	ldr	r2, [pc, #308]	; (8001ebc <HAL_GPIO_Init+0x320>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x216>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x212>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x328>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x20e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x32c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x20a>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00e      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001da6:	2308      	movs	r3, #8
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001daa:	2306      	movs	r3, #6
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x228>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4934      	ldr	r1, [pc, #208]	; (8001ea8 <HAL_GPIO_Init+0x30c>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e06:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_GPIO_Init+0x330>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae90 	bls.w	8001bb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3724      	adds	r7, #36	; 0x24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40021c00 	.word	0x40021c00
 8001ecc:	40013c00 	.word	0x40013c00

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fbf4 	bl	8000710 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e11f      	b.n	8002186 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fe58 	bl	8000c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f98:	f002 fe60 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a7b      	ldr	r2, [pc, #492]	; (8002190 <HAL_I2C_Init+0x25c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d807      	bhi.n	8001fb8 <HAL_I2C_Init+0x84>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <HAL_I2C_Init+0x260>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	e006      	b.n	8001fc6 <HAL_I2C_Init+0x92>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a77      	ldr	r2, [pc, #476]	; (8002198 <HAL_I2C_Init+0x264>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0db      	b.n	8002186 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a72      	ldr	r2, [pc, #456]	; (800219c <HAL_I2C_Init+0x268>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a64      	ldr	r2, [pc, #400]	; (8002190 <HAL_I2C_Init+0x25c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d802      	bhi.n	8002008 <HAL_I2C_Init+0xd4>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	e009      	b.n	800201c <HAL_I2C_Init+0xe8>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4a63      	ldr	r2, [pc, #396]	; (80021a0 <HAL_I2C_Init+0x26c>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	3301      	adds	r3, #1
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800202e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4956      	ldr	r1, [pc, #344]	; (8002190 <HAL_I2C_Init+0x25c>)
 8002038:	428b      	cmp	r3, r1
 800203a:	d80d      	bhi.n	8002058 <HAL_I2C_Init+0x124>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e59      	subs	r1, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fbb1 f3f3 	udiv	r3, r1, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	bf38      	it	cc
 8002054:	2304      	movcc	r3, #4
 8002056:	e04f      	b.n	80020f8 <HAL_I2C_Init+0x1c4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d111      	bne.n	8002084 <HAL_I2C_Init+0x150>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e012      	b.n	80020aa <HAL_I2C_Init+0x176>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	0099      	lsls	r1, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Init+0x17e>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e022      	b.n	80020f8 <HAL_I2C_Init+0x1c4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <HAL_I2C_Init+0x1a4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1e58      	subs	r0, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	440b      	add	r3, r1
 80020c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d6:	e00f      	b.n	80020f8 <HAL_I2C_Init+0x1c4>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e58      	subs	r0, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	0099      	lsls	r1, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	6809      	ldr	r1, [r1, #0]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69da      	ldr	r2, [r3, #28]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6911      	ldr	r1, [r2, #16]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68d2      	ldr	r2, [r2, #12]
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	000186a0 	.word	0x000186a0
 8002194:	001e847f 	.word	0x001e847f
 8002198:	003d08ff 	.word	0x003d08ff
 800219c:	431bde83 	.word	0x431bde83
 80021a0:	10624dd3 	.word	0x10624dd3

080021a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	461a      	mov	r2, r3
 80021b0:	460b      	mov	r3, r1
 80021b2:	817b      	strh	r3, [r7, #10]
 80021b4:	4613      	mov	r3, r2
 80021b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7fe fe88 	bl	8000ecc <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	f040 80e0 	bne.w	800238c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2319      	movs	r3, #25
 80021d2:	2201      	movs	r2, #1
 80021d4:	4970      	ldr	r1, [pc, #448]	; (8002398 <HAL_I2C_Master_Transmit+0x1f4>)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f001 ff33 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	e0d3      	b.n	800238e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2C_Master_Transmit+0x50>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e0cc      	b.n	800238e <HAL_I2C_Master_Transmit+0x1ea>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d007      	beq.n	800221a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2221      	movs	r2, #33	; 0x21
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2210      	movs	r2, #16
 8002236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	893a      	ldrh	r2, [r7, #8]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a50      	ldr	r2, [pc, #320]	; (800239c <HAL_I2C_Master_Transmit+0x1f8>)
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800225c:	8979      	ldrh	r1, [r7, #10]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f001 fd20 	bl	8003ca8 <I2C_MasterRequestWrite>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e08d      	b.n	800238e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002288:	e066      	b.n	8002358 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f001 ffad 	bl	80041ee <I2C_WaitOnTXEFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d107      	bne.n	80022b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06b      	b.n	800238e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d11b      	bne.n	800232c <HAL_I2C_Master_Transmit+0x188>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d017      	beq.n	800232c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	6a39      	ldr	r1, [r7, #32]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f001 ff9d 	bl	8004270 <I2C_WaitOnBTFFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2b04      	cmp	r3, #4
 8002342:	d107      	bne.n	8002354 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002352:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e01a      	b.n	800238e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d194      	bne.n	800228a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	e000      	b.n	800238e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
  }
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	00100002 	.word	0x00100002
 800239c:	ffff0000 	.word	0xffff0000

080023a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	460b      	mov	r3, r1
 80023ae:	817b      	strh	r3, [r7, #10]
 80023b0:	4613      	mov	r3, r2
 80023b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7fe fd8a 	bl	8000ecc <HAL_GetTick>
 80023b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	f040 820b 	bne.w	80027de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2319      	movs	r3, #25
 80023ce:	2201      	movs	r2, #1
 80023d0:	497c      	ldr	r1, [pc, #496]	; (80025c4 <HAL_I2C_Master_Receive+0x224>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f001 fe35 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80023de:	2302      	movs	r3, #2
 80023e0:	e1fe      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2C_Master_Receive+0x50>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e1f7      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d007      	beq.n	8002416 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2222      	movs	r2, #34	; 0x22
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2210      	movs	r2, #16
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	893a      	ldrh	r2, [r7, #8]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <HAL_I2C_Master_Receive+0x228>)
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f001 fca4 	bl	8003dac <I2C_MasterRequestRead>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1b8      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d113      	bne.n	800249e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e18c      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d11b      	bne.n	80024de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e16c      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d11b      	bne.n	800251e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002504:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	e14c      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800252c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002544:	e138      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b03      	cmp	r3, #3
 800254c:	f200 80f1 	bhi.w	8002732 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	2b01      	cmp	r3, #1
 8002556:	d123      	bne.n	80025a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f001 fec8 	bl	80042f2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e139      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800259e:	e10b      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d14e      	bne.n	8002646 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	2200      	movs	r2, #0
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <HAL_I2C_Master_Receive+0x22c>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f001 fd45 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e10e      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000
 80025cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002644:	e0b8      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	4966      	ldr	r1, [pc, #408]	; (80027e8 <HAL_I2C_Master_Receive+0x448>)
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f001 fcf6 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0bf      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2200      	movs	r2, #0
 80026aa:	494f      	ldr	r1, [pc, #316]	; (80027e8 <HAL_I2C_Master_Receive+0x448>)
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f001 fcc8 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e091      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002730:	e042      	b.n	80027b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f001 fddb 	bl	80042f2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e04c      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d118      	bne.n	80027b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f aec2 	bne.w	8002546 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	00010004 	.word	0x00010004

080027ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b10      	cmp	r3, #16
 800281a:	d003      	beq.n	8002824 <HAL_I2C_EV_IRQHandler+0x38>
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	f040 80b6 	bne.w	8002990 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_I2C_EV_IRQHandler+0x6e>
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002844:	d003      	beq.n	800284e <HAL_I2C_EV_IRQHandler+0x62>
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800284c:	d101      	bne.n	8002852 <HAL_I2C_EV_IRQHandler+0x66>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_I2C_EV_IRQHandler+0x68>
 8002852:	2300      	movs	r3, #0
 8002854:	2b01      	cmp	r3, #1
 8002856:	f000 8127 	beq.w	8002aa8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <HAL_I2C_EV_IRQHandler+0x92>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 fdc3 	bl	80043fc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fc75 	bl	8003166 <I2C_Master_SB>
 800287c:	e087      	b.n	800298e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_I2C_EV_IRQHandler+0xb2>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	0a5b      	lsrs	r3, r3, #9
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fceb 	bl	8003272 <I2C_Master_ADD10>
 800289c:	e077      	b.n	800298e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_I2C_EV_IRQHandler+0xd2>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	0a5b      	lsrs	r3, r3, #9
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fd05 	bl	80032c6 <I2C_Master_ADDR>
 80028bc:	e067      	b.n	800298e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d030      	beq.n	800292c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028d8:	f000 80e8 	beq.w	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	09db      	lsrs	r3, r3, #7
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00f      	beq.n	8002908 <HAL_I2C_EV_IRQHandler+0x11c>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_I2C_EV_IRQHandler+0x11c>
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d103      	bne.n	8002908 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f941 	bl	8002b88 <I2C_MasterTransmit_TXE>
 8002906:	e042      	b.n	800298e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80cb 	beq.w	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	0a5b      	lsrs	r3, r3, #9
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80c4 	beq.w	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f9cb 	bl	8002cc0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800292a:	e0bf      	b.n	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293a:	f000 80b7 	beq.w	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00f      	beq.n	800296a <HAL_I2C_EV_IRQHandler+0x17e>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	0a9b      	lsrs	r3, r3, #10
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_I2C_EV_IRQHandler+0x17e>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fa93 	bl	8002e8e <I2C_MasterReceive_RXNE>
 8002968:	e011      	b.n	800298e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 809a 	beq.w	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8093 	beq.w	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fb03 	bl	8002f92 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298c:	e08e      	b.n	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
 800298e:	e08d      	b.n	8002aac <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d004      	beq.n	80029a2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	e007      	b.n	80029b2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x1f8>
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	0a5b      	lsrs	r3, r3, #9
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fec1 	bl	8003764 <I2C_Slave_ADDR>
 80029e2:	e066      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_I2C_EV_IRQHandler+0x218>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	0a5b      	lsrs	r3, r3, #9
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fef5 	bl	80037ec <I2C_Slave_STOPF>
 8002a02:	e056      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a04:	7bbb      	ldrb	r3, [r7, #14]
 8002a06:	2b21      	cmp	r3, #33	; 0x21
 8002a08:	d002      	beq.n	8002a10 <HAL_I2C_EV_IRQHandler+0x224>
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	2b29      	cmp	r3, #41	; 0x29
 8002a0e:	d125      	bne.n	8002a5c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	09db      	lsrs	r3, r3, #7
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00f      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x250>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x250>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fdd7 	bl	80035e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a3a:	e039      	b.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d033      	beq.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	0a5b      	lsrs	r3, r3, #9
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02d      	beq.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fe04 	bl	8003662 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a5a:	e029      	b.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00f      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x29c>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x29c>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fe0f 	bl	80036a4 <I2C_SlaveReceive_RXNE>
 8002a86:	e014      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00e      	beq.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	0a5b      	lsrs	r3, r3, #9
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fe3d 	bl	8003720 <I2C_SlaveReceive_BTF>
 8002aa6:	e004      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002aa8:	bf00      	nop
 8002aaa:	e002      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aac:	bf00      	nop
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ab0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
 8002b14:	4613      	mov	r3, r2
 8002b16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d150      	bne.n	8002c50 <I2C_MasterTransmit_TXE+0xc8>
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b21      	cmp	r3, #33	; 0x21
 8002bb2:	d14d      	bne.n	8002c50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d01d      	beq.n	8002bf6 <I2C_MasterTransmit_TXE+0x6e>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d01a      	beq.n	8002bf6 <I2C_MasterTransmit_TXE+0x6e>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc6:	d016      	beq.n	8002bf6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2211      	movs	r2, #17
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ff62 	bl	8002ab8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bf4:	e060      	b.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d107      	bne.n	8002c40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff7d 	bl	8002b38 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c3e:	e03b      	b.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff35 	bl	8002ab8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c4e:	e033      	b.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b21      	cmp	r3, #33	; 0x21
 8002c54:	d005      	beq.n	8002c62 <I2C_MasterTransmit_TXE+0xda>
 8002c56:	7bbb      	ldrb	r3, [r7, #14]
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	d12d      	bne.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b22      	cmp	r3, #34	; 0x22
 8002c60:	d12a      	bne.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002c7c:	e01c      	b.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d103      	bne.n	8002c92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f898 	bl	8002dc0 <I2C_MemoryTransmit_TXE_BTF>
}
 8002c90:	e012      	b.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cb6:	e7ff      	b.n	8002cb8 <I2C_MasterTransmit_TXE+0x130>
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b21      	cmp	r3, #33	; 0x21
 8002cd8:	d165      	bne.n	8002da6 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d08:	e056      	b.n	8002db8 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d01d      	beq.n	8002d4c <I2C_MasterTransmit_BTF+0x8c>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d01a      	beq.n	8002d4c <I2C_MasterTransmit_BTF+0x8c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d1c:	d016      	beq.n	8002d4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2211      	movs	r2, #17
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff feb7 	bl	8002ab8 <HAL_I2C_MasterTxCpltCallback>
}
 8002d4a:	e035      	b.n	8002db8 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d107      	bne.n	8002d96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fed2 	bl	8002b38 <HAL_I2C_MemTxCpltCallback>
}
 8002d94:	e010      	b.n	8002db8 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fe8a 	bl	8002ab8 <HAL_I2C_MasterTxCpltCallback>
}
 8002da4:	e008      	b.n	8002db8 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d102      	bne.n	8002db8 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f804 	bl	8002dc0 <I2C_MemoryTransmit_TXE_BTF>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11d      	bne.n	8002e0c <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10b      	bne.n	8002df0 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	1c9a      	adds	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002dee:	e048      	b.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	121b      	asrs	r3, r3, #8
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e0a:	e03a      	b.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10b      	bne.n	8002e2c <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e2a:	e02a      	b.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d126      	bne.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b22      	cmp	r3, #34	; 0x22
 8002e3e:	d108      	bne.n	8002e52 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	e017      	b.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b21      	cmp	r3, #33	; 0x21
 8002e5c:	d111      	bne.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b22      	cmp	r3, #34	; 0x22
 8002ea0:	d173      	bne.n	8002f8a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d920      	bls.n	8002ef2 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d154      	bne.n	8002f8a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eee:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002ef0:	e04b      	b.n	8002f8a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d047      	beq.n	8002f8a <I2C_MasterReceive_RXNE+0xfc>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d002      	beq.n	8002f06 <I2C_MasterReceive_RXNE+0x78>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d141      	bne.n	8002f8a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f24:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d10a      	bne.n	8002f76 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fdec 	bl	8002b4c <HAL_I2C_MemRxCpltCallback>
}
 8002f74:	e009      	b.n	8002f8a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2212      	movs	r2, #18
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fda1 	bl	8002acc <HAL_I2C_MasterRxCpltCallback>
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d11b      	bne.n	8002fe2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002fe0:	e0bd      	b.n	800315e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d129      	bne.n	8003040 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d00a      	beq.n	8003018 <I2C_MasterReceive_BTF+0x86>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d007      	beq.n	8003018 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800303e:	e08e      	b.n	800315e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d176      	bne.n	8003138 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d002      	beq.n	8003056 <I2C_MasterReceive_BTF+0xc4>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b10      	cmp	r3, #16
 8003054:	d108      	bne.n	8003068 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e019      	b.n	800309c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <I2C_MasterReceive_BTF+0xe2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d108      	bne.n	8003086 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e00a      	b.n	800309c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b10      	cmp	r3, #16
 800308a:	d007      	beq.n	800309c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d10a      	bne.n	8003122 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fd16 	bl	8002b4c <HAL_I2C_MemRxCpltCallback>
}
 8003120:	e01d      	b.n	800315e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2212      	movs	r2, #18
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fccb 	bl	8002acc <HAL_I2C_MasterRxCpltCallback>
}
 8003136:	e012      	b.n	800315e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d117      	bne.n	80031aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003192:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003194:	e067      	b.n	8003266 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	611a      	str	r2, [r3, #16]
}
 80031a8:	e05d      	b.n	8003266 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b2:	d133      	bne.n	800321c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b21      	cmp	r3, #33	; 0x21
 80031be:	d109      	bne.n	80031d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d0:	611a      	str	r2, [r3, #16]
 80031d2:	e008      	b.n	80031e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <I2C_Master_SB+0x92>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d108      	bne.n	800320a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d032      	beq.n	8003266 <I2C_Master_SB+0x100>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d02d      	beq.n	8003266 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003218:	605a      	str	r2, [r3, #4]
}
 800321a:	e024      	b.n	8003266 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10e      	bne.n	8003242 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	b29b      	uxth	r3, r3
 800322a:	11db      	asrs	r3, r3, #7
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f063 030f 	orn	r3, r3, #15
 8003238:	b2da      	uxtb	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]
}
 8003240:	e011      	b.n	8003266 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10d      	bne.n	8003266 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	b29b      	uxth	r3, r3
 8003250:	11db      	asrs	r3, r3, #7
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f003 0306 	and.w	r3, r3, #6
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f063 030e 	orn	r3, r3, #14
 800325e:	b2da      	uxtb	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	611a      	str	r2, [r3, #16]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	b2da      	uxtb	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <I2C_Master_ADD10+0x24>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d011      	beq.n	80032ba <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <I2C_Master_ADD10+0x38>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b091      	sub	sp, #68	; 0x44
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b22      	cmp	r3, #34	; 0x22
 80032ee:	f040 8169 	bne.w	80035c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <I2C_Master_ADDR+0x54>
 80032fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d10b      	bne.n	800331a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	e160      	b.n	80035dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	d11d      	bne.n	800335e <I2C_Master_ADDR+0x98>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800332a:	d118      	bne.n	800335e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332c:	2300      	movs	r3, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003350:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	651a      	str	r2, [r3, #80]	; 0x50
 800335c:	e13e      	b.n	80035dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e115      	b.n	80035bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	f040 808a 	bne.w	80034b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033a2:	d137      	bne.n	8003414 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c2:	d113      	bne.n	80033ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	e0e7      	b.n	80035bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e0d3      	b.n	80035bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	2b08      	cmp	r3, #8
 8003418:	d02e      	beq.n	8003478 <I2C_Master_ADDR+0x1b2>
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	2b20      	cmp	r3, #32
 800341e:	d02b      	beq.n	8003478 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003422:	2b12      	cmp	r3, #18
 8003424:	d102      	bne.n	800342c <I2C_Master_ADDR+0x166>
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	2b01      	cmp	r3, #1
 800342a:	d125      	bne.n	8003478 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	2b04      	cmp	r3, #4
 8003430:	d00e      	beq.n	8003450 <I2C_Master_ADDR+0x18a>
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	2b02      	cmp	r3, #2
 8003436:	d00b      	beq.n	8003450 <I2C_Master_ADDR+0x18a>
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	2b10      	cmp	r3, #16
 800343c:	d008      	beq.n	8003450 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e007      	b.n	8003460 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800345e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	e0a1      	b.n	80035bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003486:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e085      	b.n	80035bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d14d      	bne.n	8003556 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d016      	beq.n	80034ee <I2C_Master_ADDR+0x228>
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d013      	beq.n	80034ee <I2C_Master_ADDR+0x228>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d010      	beq.n	80034ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e007      	b.n	80034fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350c:	d117      	bne.n	800353e <I2C_Master_ADDR+0x278>
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003514:	d00b      	beq.n	800352e <I2C_Master_ADDR+0x268>
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2b01      	cmp	r3, #1
 800351a:	d008      	beq.n	800352e <I2C_Master_ADDR+0x268>
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b08      	cmp	r3, #8
 8003520:	d005      	beq.n	800352e <I2C_Master_ADDR+0x268>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b10      	cmp	r3, #16
 8003526:	d002      	beq.n	800352e <I2C_Master_ADDR+0x268>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	2b20      	cmp	r3, #32
 800352c:	d107      	bne.n	800353e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800353c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	e032      	b.n	80035bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003564:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003574:	d117      	bne.n	80035a6 <I2C_Master_ADDR+0x2e0>
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800357c:	d00b      	beq.n	8003596 <I2C_Master_ADDR+0x2d0>
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2b01      	cmp	r3, #1
 8003582:	d008      	beq.n	8003596 <I2C_Master_ADDR+0x2d0>
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	2b08      	cmp	r3, #8
 8003588:	d005      	beq.n	8003596 <I2C_Master_ADDR+0x2d0>
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b10      	cmp	r3, #16
 800358e:	d002      	beq.n	8003596 <I2C_Master_ADDR+0x2d0>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	2b20      	cmp	r3, #32
 8003594:	d107      	bne.n	80035a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80035c2:	e00b      	b.n	80035dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
}
 80035da:	e7ff      	b.n	80035dc <I2C_Master_ADDR+0x316>
 80035dc:	bf00      	nop
 80035de:	3744      	adds	r7, #68	; 0x44
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02b      	beq.n	800365a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d114      	bne.n	800365a <I2C_SlaveTransmit_TXE+0x72>
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b29      	cmp	r3, #41	; 0x29
 8003634:	d111      	bne.n	800365a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2221      	movs	r2, #33	; 0x21
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2228      	movs	r2, #40	; 0x28
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fa43 	bl	8002ae0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d011      	beq.n	8003698 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02c      	beq.n	8003718 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d114      	bne.n	8003718 <I2C_SlaveReceive_RXNE+0x74>
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b2a      	cmp	r3, #42	; 0x2a
 80036f2:	d111      	bne.n	8003718 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2222      	movs	r2, #34	; 0x22
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2228      	movs	r2, #40	; 0x28
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff f9ee 	bl	8002af4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800377e:	2b28      	cmp	r3, #40	; 0x28
 8003780:	d127      	bne.n	80037d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003790:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	09db      	lsrs	r3, r3, #7
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	81bb      	strh	r3, [r7, #12]
 80037b4:	e002      	b.n	80037bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80037c4:	89ba      	ldrh	r2, [r7, #12]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff f99c 	bl	8002b08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037d0:	e008      	b.n	80037e4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0202 	mvn.w	r2, #2
 80037da:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800380a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003838:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003848:	d172      	bne.n	8003930 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b22      	cmp	r3, #34	; 0x22
 800384e:	d002      	beq.n	8003856 <I2C_Slave_STOPF+0x6a>
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b2a      	cmp	r3, #42	; 0x2a
 8003854:	d135      	bne.n	80038c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0204 	orr.w	r2, r3, #4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003888:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f8c6 	bl	8001a20 <HAL_DMA_GetState>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d049      	beq.n	800392e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <I2C_Slave_STOPF+0x258>)
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd ff0e 	bl	80016c8 <HAL_DMA_Abort_IT>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03d      	beq.n	800392e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038bc:	4610      	mov	r0, r2
 80038be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038c0:	e035      	b.n	800392e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe f890 	bl	8001a20 <HAL_DMA_GetState>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d014      	beq.n	8003930 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	4a4e      	ldr	r2, [pc, #312]	; (8003a44 <I2C_Slave_STOPF+0x258>)
 800390c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fed8 	bl	80016c8 <HAL_DMA_Abort_IT>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003928:	4610      	mov	r0, r2
 800392a:	4798      	blx	r3
 800392c:	e000      	b.n	8003930 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800392e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d03e      	beq.n	80039b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d112      	bne.n	800396e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d112      	bne.n	80039a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	f043 0204 	orr.w	r2, r3, #4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f843 	bl	8003a4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80039c6:	e039      	b.n	8003a3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b2a      	cmp	r3, #42	; 0x2a
 80039cc:	d109      	bne.n	80039e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2228      	movs	r2, #40	; 0x28
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff f889 	bl	8002af4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b28      	cmp	r3, #40	; 0x28
 80039ec:	d111      	bne.n	8003a12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <I2C_Slave_STOPF+0x25c>)
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff f88a 	bl	8002b24 <HAL_I2C_ListenCpltCallback>
}
 8003a10:	e014      	b.n	8003a3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	2b22      	cmp	r3, #34	; 0x22
 8003a18:	d002      	beq.n	8003a20 <I2C_Slave_STOPF+0x234>
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b22      	cmp	r3, #34	; 0x22
 8003a1e:	d10d      	bne.n	8003a3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff f85c 	bl	8002af4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	08003f45 	.word	0x08003f45
 8003a48:	ffff0000 	.word	0xffff0000

08003a4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d10a      	bne.n	8003a7e <I2C_ITError+0x32>
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b22      	cmp	r3, #34	; 0x22
 8003a6c:	d107      	bne.n	8003a7e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a84:	2b28      	cmp	r3, #40	; 0x28
 8003a86:	d107      	bne.n	8003a98 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2228      	movs	r2, #40	; 0x28
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a96:	e015      	b.n	8003ac4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa6:	d006      	beq.n	8003ab6 <I2C_ITError+0x6a>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b60      	cmp	r3, #96	; 0x60
 8003aac:	d003      	beq.n	8003ab6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad2:	d162      	bne.n	8003b9a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d020      	beq.n	8003b34 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	4a6a      	ldr	r2, [pc, #424]	; (8003ca0 <I2C_ITError+0x254>)
 8003af8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fde2 	bl	80016c8 <HAL_DMA_Abort_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8089 	beq.w	8003c1e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4798      	blx	r3
 8003b32:	e074      	b.n	8003c1e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	4a59      	ldr	r2, [pc, #356]	; (8003ca0 <I2C_ITError+0x254>)
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd fdc1 	bl	80016c8 <HAL_DMA_Abort_IT>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d068      	beq.n	8003c1e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d10b      	bne.n	8003b72 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b94:	4610      	mov	r0, r2
 8003b96:	4798      	blx	r3
 8003b98:	e041      	b.n	8003c1e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b60      	cmp	r3, #96	; 0x60
 8003ba4:	d125      	bne.n	8003bf2 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d10b      	bne.n	8003bda <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe ffc2 	bl	8002b74 <HAL_I2C_AbortCpltCallback>
 8003bf0:	e015      	b.n	8003c1e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d10b      	bne.n	8003c18 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fe ffa1 	bl	8002b60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c62:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d113      	bne.n	8003c98 <I2C_ITError+0x24c>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b28      	cmp	r3, #40	; 0x28
 8003c74:	d110      	bne.n	8003c98 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <I2C_ITError+0x258>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fe ff46 	bl	8002b24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08003f45 	.word	0x08003f45
 8003ca4:	ffff0000 	.word	0xffff0000

08003ca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d006      	beq.n	8003cd2 <I2C_MasterRequestWrite+0x2a>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d003      	beq.n	8003cd2 <I2C_MasterRequestWrite+0x2a>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd0:	d108      	bne.n	8003ce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e00b      	b.n	8003cfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b12      	cmp	r3, #18
 8003cea:	d107      	bne.n	8003cfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f99a 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e035      	b.n	8003d9a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d36:	d108      	bne.n	8003d4a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d38:	897b      	ldrh	r3, [r7, #10]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d46:	611a      	str	r2, [r3, #16]
 8003d48:	e01b      	b.n	8003d82 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d4a:	897b      	ldrh	r3, [r7, #10]
 8003d4c:	11db      	asrs	r3, r3, #7
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 0306 	and.w	r3, r3, #6
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f063 030f 	orn	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	490f      	ldr	r1, [pc, #60]	; (8003da4 <I2C_MasterRequestWrite+0xfc>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f9c1 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e010      	b.n	8003d9a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d78:	897b      	ldrh	r3, [r7, #10]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <I2C_MasterRequestWrite+0x100>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f9b1 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	00010008 	.word	0x00010008
 8003da8:	00010002 	.word	0x00010002

08003dac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	460b      	mov	r3, r1
 8003dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d006      	beq.n	8003de6 <I2C_MasterRequestRead+0x3a>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d003      	beq.n	8003de6 <I2C_MasterRequestRead+0x3a>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de4:	d108      	bne.n	8003df8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e00b      	b.n	8003e10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	2b11      	cmp	r3, #17
 8003dfe:	d107      	bne.n	8003e10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f910 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e078      	b.n	8003f34 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e4a:	d108      	bne.n	8003e5e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e4c:	897b      	ldrh	r3, [r7, #10]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	611a      	str	r2, [r3, #16]
 8003e5c:	e05e      	b.n	8003f1c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	11db      	asrs	r3, r3, #7
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 0306 	and.w	r3, r3, #6
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f063 030f 	orn	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4930      	ldr	r1, [pc, #192]	; (8003f3c <I2C_MasterRequestRead+0x190>)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f937 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e053      	b.n	8003f34 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4929      	ldr	r1, [pc, #164]	; (8003f40 <I2C_MasterRequestRead+0x194>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f927 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e043      	b.n	8003f34 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8af 	bl	8004042 <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e017      	b.n	8003f34 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	11db      	asrs	r3, r3, #7
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0306 	and.w	r3, r3, #6
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f063 030e 	orn	r3, r3, #14
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4907      	ldr	r1, [pc, #28]	; (8003f40 <I2C_MasterRequestRead+0x194>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f8e4 	bl	80040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	00010008 	.word	0x00010008
 8003f40:	00010002 	.word	0x00010002

08003f44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	2200      	movs	r2, #0
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2200      	movs	r2, #0
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	2200      	movs	r2, #0
 8003fae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d10e      	bne.n	8003fea <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7fe fdc6 	bl	8002b74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fe8:	e027      	b.n	800403a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ff0:	2b28      	cmp	r3, #40	; 0x28
 8003ff2:	d117      	bne.n	8004024 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004012:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2228      	movs	r2, #40	; 0x28
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004022:	e007      	b.n	8004034 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7fe fd93 	bl	8002b60 <HAL_I2C_ErrorCallback>
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004052:	e025      	b.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d021      	beq.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7fc ff36 	bl	8000ecc <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x30>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e023      	b.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10d      	bne.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	e00c      	b.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d0b6      	beq.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040fe:	e051      	b.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d123      	bne.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0204 	orr.w	r2, r3, #4
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e046      	b.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d021      	beq.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fc feb4 	bl	8000ecc <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d116      	bne.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e020      	b.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d10c      	bne.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	43da      	mvns	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4013      	ands	r3, r2
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf14      	ite	ne
 80041c0:	2301      	movne	r3, #1
 80041c2:	2300      	moveq	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	e00b      	b.n	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d18d      	bne.n	8004100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041fa:	e02d      	b.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f8ce 	bl	800439e <I2C_IsAcknowledgeFailed>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e02d      	b.n	8004268 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d021      	beq.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004214:	f7fc fe5a 	bl	8000ecc <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d116      	bne.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e007      	b.n	8004268 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d1ca      	bne.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800427c:	e02d      	b.n	80042da <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f88d 	bl	800439e <I2C_IsAcknowledgeFailed>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e02d      	b.n	80042ea <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d021      	beq.n	80042da <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fc fe19 	bl	8000ecc <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f043 0220 	orr.w	r2, r3, #32
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e007      	b.n	80042ea <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d1ca      	bne.n	800427e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042fe:	e042      	b.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b10      	cmp	r3, #16
 800430c:	d119      	bne.n	8004342 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f06f 0210 	mvn.w	r2, #16
 8004316:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e029      	b.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fc fdc3 	bl	8000ecc <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d116      	bne.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e007      	b.n	8004396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d1b5      	bne.n	8004300 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d11b      	bne.n	80043ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800440c:	d103      	bne.n	8004416 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004414:	e007      	b.n	8004426 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800441e:	d102      	bne.n	8004426 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2208      	movs	r2, #8
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e25b      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d075      	beq.n	800453e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004452:	4ba3      	ldr	r3, [pc, #652]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b04      	cmp	r3, #4
 800445c:	d00c      	beq.n	8004478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445e:	4ba0      	ldr	r3, [pc, #640]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004466:	2b08      	cmp	r3, #8
 8004468:	d112      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446a:	4b9d      	ldr	r3, [pc, #628]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004476:	d10b      	bne.n	8004490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4b99      	ldr	r3, [pc, #612]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05b      	beq.n	800453c <HAL_RCC_OscConfig+0x108>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d157      	bne.n	800453c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e236      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d106      	bne.n	80044a8 <HAL_RCC_OscConfig+0x74>
 800449a:	4b91      	ldr	r3, [pc, #580]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a90      	ldr	r2, [pc, #576]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x98>
 80044b2:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a8a      	ldr	r2, [pc, #552]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a87      	ldr	r2, [pc, #540]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xb0>
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b81      	ldr	r3, [pc, #516]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a80      	ldr	r2, [pc, #512]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fc fcee 	bl	8000ecc <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fc fcea 	bl	8000ecc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1fb      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xc0>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fc fcda 	bl	8000ecc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451c:	f7fc fcd6 	bl	8000ecc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1e7      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b6c      	ldr	r3, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0xe8>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004556:	4b62      	ldr	r3, [pc, #392]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b5f      	ldr	r3, [pc, #380]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b5c      	ldr	r3, [pc, #368]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x152>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1bb      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4952      	ldr	r1, [pc, #328]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_RCC_OscConfig+0x2b0>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fc fc8f 	bl	8000ecc <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fc fc8b 	bl	8000ecc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e19c      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4940      	ldr	r1, [pc, #256]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCC_OscConfig+0x2b0>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fc fc6e 	bl	8000ecc <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fc fc6a 	bl	8000ecc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e17b      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <HAL_RCC_OscConfig+0x2b4>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fc fc4e 	bl	8000ecc <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004634:	f7fc fc4a 	bl	8000ecc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e15b      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x200>
 8004652:	e015      	b.n	8004680 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCC_OscConfig+0x2b4>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465a:	f7fc fc37 	bl	8000ecc <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004662:	f7fc fc33 	bl	8000ecc <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e144      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80a0 	beq.w	80047ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10f      	bne.n	80046be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d121      	bne.n	800470e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a07      	ldr	r2, [pc, #28]	; (80046ec <HAL_RCC_OscConfig+0x2b8>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d6:	f7fc fbf9 	bl	8000ecc <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	e011      	b.n	8004702 <HAL_RCC_OscConfig+0x2ce>
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
 80046ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fc fbec 	bl	8000ecc <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0fd      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b81      	ldr	r3, [pc, #516]	; (8004908 <HAL_RCC_OscConfig+0x4d4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x2f0>
 8004716:	4b7d      	ldr	r3, [pc, #500]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a7c      	ldr	r2, [pc, #496]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	e01c      	b.n	800475e <HAL_RCC_OscConfig+0x32a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b05      	cmp	r3, #5
 800472a:	d10c      	bne.n	8004746 <HAL_RCC_OscConfig+0x312>
 800472c:	4b77      	ldr	r3, [pc, #476]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	4b74      	ldr	r3, [pc, #464]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a73      	ldr	r2, [pc, #460]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	e00b      	b.n	800475e <HAL_RCC_OscConfig+0x32a>
 8004746:	4b71      	ldr	r3, [pc, #452]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a70      	ldr	r2, [pc, #448]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
 8004752:	4b6e      	ldr	r3, [pc, #440]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a6d      	ldr	r2, [pc, #436]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d015      	beq.n	8004792 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fc fbb1 	bl	8000ecc <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fc fbad 	bl	8000ecc <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	; 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e0bc      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ee      	beq.n	800476e <HAL_RCC_OscConfig+0x33a>
 8004790:	e014      	b.n	80047bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fc fb9b 	bl	8000ecc <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fc fb97 	bl	8000ecc <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e0a6      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	4b56      	ldr	r3, [pc, #344]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ee      	bne.n	800479a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c2:	4b52      	ldr	r3, [pc, #328]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a51      	ldr	r2, [pc, #324]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8092 	beq.w	80048fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d8:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d05c      	beq.n	800489e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d141      	bne.n	8004870 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ec:	4b48      	ldr	r3, [pc, #288]	; (8004910 <HAL_RCC_OscConfig+0x4dc>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fc fb6b 	bl	8000ecc <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fc fb67 	bl	8000ecc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e078      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480c:	4b3f      	ldr	r3, [pc, #252]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	019b      	lsls	r3, r3, #6
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	061b      	lsls	r3, r3, #24
 800483c:	4933      	ldr	r1, [pc, #204]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004842:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_RCC_OscConfig+0x4dc>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc fb40 	bl	8000ecc <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc fb3c 	bl	8000ecc <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e04d      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x41c>
 800486e:	e045      	b.n	80048fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCC_OscConfig+0x4dc>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004876:	f7fc fb29 	bl	8000ecc <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487e:	f7fc fb25 	bl	8000ecc <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e036      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004890:	4b1e      	ldr	r3, [pc, #120]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCC_OscConfig+0x44a>
 800489c:	e02e      	b.n	80048fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e029      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <HAL_RCC_OscConfig+0x4d8>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d115      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d2:	4013      	ands	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d106      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40007000 	.word	0x40007000
 800490c:	40023800 	.word	0x40023800
 8004910:	42470060 	.word	0x42470060

08004914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0cc      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d90c      	bls.n	8004950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b65      	ldr	r3, [pc, #404]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a58      	ldr	r2, [pc, #352]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a52      	ldr	r2, [pc, #328]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800498a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d044      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d119      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d003      	beq.n	80049d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b3f      	ldr	r3, [pc, #252]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e067      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b37      	ldr	r3, [pc, #220]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4934      	ldr	r1, [pc, #208]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a04:	f7fc fa62 	bl	8000ecc <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fc fa5e 	bl	8000ecc <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e04f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2b      	ldr	r3, [pc, #172]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d20c      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b22      	ldr	r3, [pc, #136]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	5cd3      	ldrb	r3, [r2, r3]
 8004aae:	fa21 f303 	lsr.w	r3, r1, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc f8f8 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023c00 	.word	0x40023c00
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	0800868c 	.word	0x0800868c
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	20000004 	.word	0x20000004

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	2300      	movs	r3, #0
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af6:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d007      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x32>
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d008      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x38>
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 808d 	bne.w	8004c26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b0e:	60bb      	str	r3, [r7, #8]
       break;
 8004b10:	e08c      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b12:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b14:	60bb      	str	r3, [r7, #8]
      break;
 8004b16:	e089      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b22:	4b45      	ldr	r3, [pc, #276]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d023      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b42      	ldr	r3, [pc, #264]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	f04f 0400 	mov.w	r4, #0
 8004b38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	ea03 0501 	and.w	r5, r3, r1
 8004b44:	ea04 0602 	and.w	r6, r4, r2
 8004b48:	4a3d      	ldr	r2, [pc, #244]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b4a:	fb02 f106 	mul.w	r1, r2, r6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	fb02 f205 	mul.w	r2, r2, r5
 8004b54:	440a      	add	r2, r1
 8004b56:	493a      	ldr	r1, [pc, #232]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b58:	fba5 0101 	umull	r0, r1, r5, r1
 8004b5c:	1853      	adds	r3, r2, r1
 8004b5e:	4619      	mov	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	f7fb fb31 	bl	80001d0 <__aeabi_uldivmod>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e049      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b30      	ldr	r3, [pc, #192]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	ea03 0501 	and.w	r5, r3, r1
 8004b8c:	ea04 0602 	and.w	r6, r4, r2
 8004b90:	4629      	mov	r1, r5
 8004b92:	4632      	mov	r2, r6
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	0154      	lsls	r4, r2, #5
 8004b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ba2:	014b      	lsls	r3, r1, #5
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	1b49      	subs	r1, r1, r5
 8004baa:	eb62 0206 	sbc.w	r2, r2, r6
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	f04f 0400 	mov.w	r4, #0
 8004bb6:	0194      	lsls	r4, r2, #6
 8004bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bbc:	018b      	lsls	r3, r1, #6
 8004bbe:	1a5b      	subs	r3, r3, r1
 8004bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	00e2      	lsls	r2, r4, #3
 8004bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bd2:	00d9      	lsls	r1, r3, #3
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4614      	mov	r4, r2
 8004bd8:	195b      	adds	r3, r3, r5
 8004bda:	eb44 0406 	adc.w	r4, r4, r6
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	02a2      	lsls	r2, r4, #10
 8004be8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bec:	0299      	lsls	r1, r3, #10
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f04f 0400 	mov.w	r4, #0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	f7fb fae6 	bl	80001d0 <__aeabi_uldivmod>
 8004c04:	4603      	mov	r3, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	3301      	adds	r3, #1
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	60bb      	str	r3, [r7, #8]
      break;
 8004c24:	e002      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c28:	60bb      	str	r3, [r7, #8]
      break;
 8004c2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	017d7840 	.word	0x017d7840

08004c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000000 	.word	0x20000000

08004c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c60:	f7ff fff0 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c64:	4601      	mov	r1, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	0a9b      	lsrs	r3, r3, #10
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4a03      	ldr	r2, [pc, #12]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c72:	5cd3      	ldrb	r3, [r2, r3]
 8004c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	0800869c 	.word	0x0800869c

08004c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	220f      	movs	r2, #15
 8004c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c94:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0203 	and.w	r2, r3, #3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	08db      	lsrs	r3, r3, #3
 8004cbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_RCC_GetClockConfig+0x60>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	601a      	str	r2, [r3, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40023c00 	.word	0x40023c00

08004ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e01d      	b.n	8004d36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f815 	bl	8004d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f000 f968 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b06      	cmp	r3, #6
 8004d7a:	d007      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d122      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11b      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f06f 0202 	mvn.w	r2, #2
 8004dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f8ee 	bl	8004fbe <HAL_TIM_IC_CaptureCallback>
 8004de2:	e005      	b.n	8004df0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f8e0 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f8f1 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d122      	bne.n	8004e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d11b      	bne.n	8004e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f06f 0204 	mvn.w	r2, #4
 8004e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f8c4 	bl	8004fbe <HAL_TIM_IC_CaptureCallback>
 8004e36:	e005      	b.n	8004e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f8b6 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8c7 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d122      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f06f 0208 	mvn.w	r2, #8
 8004e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2204      	movs	r2, #4
 8004e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f89a 	bl	8004fbe <HAL_TIM_IC_CaptureCallback>
 8004e8a:	e005      	b.n	8004e98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f88c 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f89d 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d122      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d11b      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f06f 0210 	mvn.w	r2, #16
 8004ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f870 	bl	8004fbe <HAL_TIM_IC_CaptureCallback>
 8004ede:	e005      	b.n	8004eec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f862 	bl	8004faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f873 	bl	8004fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10e      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f06f 0201 	mvn.w	r2, #1
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fb fdbf 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d10e      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b80      	cmp	r3, #128	; 0x80
 8004f38:	d107      	bne.n	8004f4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f903 	bl	8005150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d10e      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f838 	bl	8004fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d10e      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d107      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0220 	mvn.w	r2, #32
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8cd 	bl	800513c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a40      	ldr	r2, [pc, #256]	; (8005110 <TIM_Base_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3d      	ldr	r2, [pc, #244]	; (8005114 <TIM_Base_SetConfig+0x118>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3c      	ldr	r2, [pc, #240]	; (8005118 <TIM_Base_SetConfig+0x11c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3b      	ldr	r2, [pc, #236]	; (800511c <TIM_Base_SetConfig+0x120>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3a      	ldr	r2, [pc, #232]	; (8005120 <TIM_Base_SetConfig+0x124>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2f      	ldr	r2, [pc, #188]	; (8005110 <TIM_Base_SetConfig+0x114>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02b      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505c:	d027      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2c      	ldr	r2, [pc, #176]	; (8005114 <TIM_Base_SetConfig+0x118>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d023      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2b      	ldr	r2, [pc, #172]	; (8005118 <TIM_Base_SetConfig+0x11c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01f      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2a      	ldr	r2, [pc, #168]	; (800511c <TIM_Base_SetConfig+0x120>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01b      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a29      	ldr	r2, [pc, #164]	; (8005120 <TIM_Base_SetConfig+0x124>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d017      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a28      	ldr	r2, [pc, #160]	; (8005124 <TIM_Base_SetConfig+0x128>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a27      	ldr	r2, [pc, #156]	; (8005128 <TIM_Base_SetConfig+0x12c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00f      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <TIM_Base_SetConfig+0x130>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00b      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a25      	ldr	r2, [pc, #148]	; (8005130 <TIM_Base_SetConfig+0x134>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d007      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a24      	ldr	r2, [pc, #144]	; (8005134 <TIM_Base_SetConfig+0x138>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a23      	ldr	r2, [pc, #140]	; (8005138 <TIM_Base_SetConfig+0x13c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d108      	bne.n	80050c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <TIM_Base_SetConfig+0x114>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0xf8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <TIM_Base_SetConfig+0x124>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d103      	bne.n	80050fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	615a      	str	r2, [r3, #20]
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800
 8005130:	40001800 	.word	0x40001800
 8005134:	40001c00 	.word	0x40001c00
 8005138:	40002000 	.word	0x40002000

0800513c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516a:	f3ef 8305 	mrs	r3, IPSR
 800516e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10f      	bne.n	8005196 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005176:	f3ef 8310 	mrs	r3, PRIMASK
 800517a:	607b      	str	r3, [r7, #4]
  return(result);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <osKernelInitialize+0x32>
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <osKernelInitialize+0x64>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d109      	bne.n	800519e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800518a:	f3ef 8311 	mrs	r3, BASEPRI
 800518e:	603b      	str	r3, [r7, #0]
  return(result);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005196:	f06f 0305 	mvn.w	r3, #5
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e00c      	b.n	80051b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <osKernelInitialize+0x64>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <osKernelInitialize+0x64>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e002      	b.n	80051b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	2000002c 	.word	0x2000002c

080051cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d2:	f3ef 8305 	mrs	r3, IPSR
 80051d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80051d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051de:	f3ef 8310 	mrs	r3, PRIMASK
 80051e2:	607b      	str	r3, [r7, #4]
  return(result);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <osKernelStart+0x32>
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <osKernelStart+0x64>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d109      	bne.n	8005206 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051f2:	f3ef 8311 	mrs	r3, BASEPRI
 80051f6:	603b      	str	r3, [r7, #0]
  return(result);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <osKernelStart+0x3a>
    stat = osErrorISR;
 80051fe:	f06f 0305 	mvn.w	r3, #5
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e00e      	b.n	8005224 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <osKernelStart+0x64>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <osKernelStart+0x64>)
 8005210:	2202      	movs	r2, #2
 8005212:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005214:	f001 fc7a 	bl	8006b0c <vTaskStartScheduler>
      stat = osOK;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	e002      	b.n	8005224 <osKernelStart+0x58>
    } else {
      stat = osError;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	2000002c 	.word	0x2000002c

08005234 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b092      	sub	sp, #72	; 0x48
 8005238:	af04      	add	r7, sp, #16
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005244:	f3ef 8305 	mrs	r3, IPSR
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 8094 	bne.w	800537a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005252:	f3ef 8310 	mrs	r3, PRIMASK
 8005256:	623b      	str	r3, [r7, #32]
  return(result);
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 808d 	bne.w	800537a <osThreadNew+0x146>
 8005260:	4b48      	ldr	r3, [pc, #288]	; (8005384 <osThreadNew+0x150>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d106      	bne.n	8005276 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005268:	f3ef 8311 	mrs	r3, BASEPRI
 800526c:	61fb      	str	r3, [r7, #28]
  return(result);
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 8082 	bne.w	800537a <osThreadNew+0x146>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d07e      	beq.n	800537a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005280:	2318      	movs	r3, #24
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005284:	2300      	movs	r3, #0
 8005286:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005288:	f107 031b 	add.w	r3, r7, #27
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d045      	beq.n	8005326 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <osThreadNew+0x74>
        name = attr->name;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <osThreadNew+0x9a>
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	2b38      	cmp	r3, #56	; 0x38
 80052c0:	d805      	bhi.n	80052ce <osThreadNew+0x9a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <osThreadNew+0x9e>
        return (NULL);
 80052ce:	2300      	movs	r3, #0
 80052d0:	e054      	b.n	800537c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	089b      	lsrs	r3, r3, #2
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <osThreadNew+0xd4>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b5b      	cmp	r3, #91	; 0x5b
 80052f0:	d90a      	bls.n	8005308 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d006      	beq.n	8005308 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <osThreadNew+0xd4>
        mem = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	62bb      	str	r3, [r7, #40]	; 0x28
 8005306:	e010      	b.n	800532a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10c      	bne.n	800532a <osThreadNew+0xf6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d108      	bne.n	800532a <osThreadNew+0xf6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <osThreadNew+0xf6>
          mem = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28
 8005324:	e001      	b.n	800532a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	2b01      	cmp	r3, #1
 800532e:	d110      	bne.n	8005352 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005338:	9202      	str	r2, [sp, #8]
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005344:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f001 fa4c 	bl	80067e4 <xTaskCreateStatic>
 800534c:	4603      	mov	r3, r0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e013      	b.n	800537a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d110      	bne.n	800537a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	b29a      	uxth	r2, r3
 800535c:	f107 0314 	add.w	r3, r7, #20
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f001 fa93 	bl	8006896 <xTaskCreate>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d001      	beq.n	800537a <osThreadNew+0x146>
          hTask = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800537a:	697b      	ldr	r3, [r7, #20]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3738      	adds	r7, #56	; 0x38
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	2000002c 	.word	0x2000002c

08005388 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005398:	f3ef 8305 	mrs	r3, IPSR
 800539c:	61bb      	str	r3, [r7, #24]
  return(result);
 800539e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f040 8088 	bne.w	80054b6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a6:	f3ef 8310 	mrs	r3, PRIMASK
 80053aa:	617b      	str	r3, [r7, #20]
  return(result);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 8081 	bne.w	80054b6 <osSemaphoreNew+0x12e>
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <osSemaphoreNew+0x138>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d105      	bne.n	80053c8 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053bc:	f3ef 8311 	mrs	r3, BASEPRI
 80053c0:	613b      	str	r3, [r7, #16]
  return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d176      	bne.n	80054b6 <osSemaphoreNew+0x12e>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d073      	beq.n	80054b6 <osSemaphoreNew+0x12e>
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d86f      	bhi.n	80054b6 <osSemaphoreNew+0x12e>
    mem = -1;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d015      	beq.n	800540e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d006      	beq.n	80053f8 <osSemaphoreNew+0x70>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b4f      	cmp	r3, #79	; 0x4f
 80053f0:	d902      	bls.n	80053f8 <osSemaphoreNew+0x70>
        mem = 1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	e00c      	b.n	8005412 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d108      	bne.n	8005412 <osSemaphoreNew+0x8a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <osSemaphoreNew+0x8a>
          mem = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	623b      	str	r3, [r7, #32]
 800540c:	e001      	b.n	8005412 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d04d      	beq.n	80054b6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d129      	bne.n	8005474 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d10b      	bne.n	800543e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	2303      	movs	r3, #3
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	2200      	movs	r2, #0
 8005432:	2100      	movs	r1, #0
 8005434:	2001      	movs	r0, #1
 8005436:	f000 fa53 	bl	80058e0 <xQueueGenericCreateStatic>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24
 800543c:	e005      	b.n	800544a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800543e:	2203      	movs	r2, #3
 8005440:	2100      	movs	r1, #0
 8005442:	2001      	movs	r0, #1
 8005444:	f000 fabe 	bl	80059c4 <xQueueGenericCreate>
 8005448:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	2b00      	cmp	r3, #0
 800544e:	d022      	beq.n	8005496 <osSemaphoreNew+0x10e>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01f      	beq.n	8005496 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005456:	2300      	movs	r3, #0
 8005458:	2200      	movs	r2, #0
 800545a:	2100      	movs	r1, #0
 800545c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800545e:	f000 fb77 	bl	8005b50 <xQueueGenericSend>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d016      	beq.n	8005496 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8005468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800546a:	f000 ffea 	bl	8006442 <vQueueDelete>
            hSemaphore = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
 8005472:	e010      	b.n	8005496 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d108      	bne.n	800548c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	461a      	mov	r2, r3
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fafe 	bl	8005a84 <xQueueCreateCountingSemaphoreStatic>
 8005488:	6278      	str	r0, [r7, #36]	; 0x24
 800548a:	e004      	b.n	8005496 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fb2d 	bl	8005aee <xQueueCreateCountingSemaphore>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <osSemaphoreNew+0x122>
          name = attr->name;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	e001      	b.n	80054ae <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80054ae:	69f9      	ldr	r1, [r7, #28]
 80054b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054b2:	f001 f911 	bl	80066d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3728      	adds	r7, #40	; 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	2000002c 	.word	0x2000002c

080054c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80054dc:	f06f 0303 	mvn.w	r3, #3
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	e04b      	b.n	800557c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e4:	f3ef 8305 	mrs	r3, IPSR
 80054e8:	617b      	str	r3, [r7, #20]
  return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10f      	bne.n	8005510 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f0:	f3ef 8310 	mrs	r3, PRIMASK
 80054f4:	613b      	str	r3, [r7, #16]
  return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <osSemaphoreAcquire+0x4c>
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <osSemaphoreAcquire+0xc4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d128      	bne.n	8005556 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005504:	f3ef 8311 	mrs	r3, BASEPRI
 8005508:	60fb      	str	r3, [r7, #12]
  return(result);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d022      	beq.n	8005556 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005516:	f06f 0303 	mvn.w	r3, #3
 800551a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800551c:	e02d      	b.n	800557a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005522:	f107 0308 	add.w	r3, r7, #8
 8005526:	461a      	mov	r2, r3
 8005528:	2100      	movs	r1, #0
 800552a:	69b8      	ldr	r0, [r7, #24]
 800552c:	f000 ff0c 	bl	8006348 <xQueueReceiveFromISR>
 8005530:	4603      	mov	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d003      	beq.n	800553e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005536:	f06f 0302 	mvn.w	r3, #2
 800553a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800553c:	e01d      	b.n	800557a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01a      	beq.n	800557a <osSemaphoreAcquire+0xb6>
 8005544:	4b11      	ldr	r3, [pc, #68]	; (800558c <osSemaphoreAcquire+0xc8>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005554:	e011      	b.n	800557a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	69b8      	ldr	r0, [r7, #24]
 800555a:	f000 fded 	bl	8006138 <xQueueSemaphoreTake>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d00b      	beq.n	800557c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800556a:	f06f 0301 	mvn.w	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	e004      	b.n	800557c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005572:	f06f 0302 	mvn.w	r3, #2
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e000      	b.n	800557c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800557a:	bf00      	nop
      }
    }
  }

  return (stat);
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	2000002c 	.word	0x2000002c
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80055a6:	f06f 0303 	mvn.w	r3, #3
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	e03e      	b.n	800562c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ae:	f3ef 8305 	mrs	r3, IPSR
 80055b2:	617b      	str	r3, [r7, #20]
  return(result);
 80055b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ba:	f3ef 8310 	mrs	r3, PRIMASK
 80055be:	613b      	str	r3, [r7, #16]
  return(result);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <osSemaphoreRelease+0x4a>
 80055c6:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <osSemaphoreRelease+0xa8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d120      	bne.n	8005610 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055ce:	f3ef 8311 	mrs	r3, BASEPRI
 80055d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01a      	beq.n	8005610 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4619      	mov	r1, r3
 80055e4:	69b8      	ldr	r0, [r7, #24]
 80055e6:	f000 fc41 	bl	8005e6c <xQueueGiveFromISR>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d003      	beq.n	80055f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80055f0:	f06f 0302 	mvn.w	r3, #2
 80055f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80055f6:	e018      	b.n	800562a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d015      	beq.n	800562a <osSemaphoreRelease+0x9a>
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <osSemaphoreRelease+0xac>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800560e:	e00c      	b.n	800562a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005610:	2300      	movs	r3, #0
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	69b8      	ldr	r0, [r7, #24]
 8005618:	f000 fa9a 	bl	8005b50 <xQueueGenericSend>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d004      	beq.n	800562c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005622:	f06f 0302 	mvn.w	r3, #2
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	e000      	b.n	800562c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800562a:	bf00      	nop
    }
  }

  return (stat);
 800562c:	69fb      	ldr	r3, [r7, #28]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	2000002c 	.word	0x2000002c
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a07      	ldr	r2, [pc, #28]	; (800566c <vApplicationGetIdleTaskMemory+0x2c>)
 8005650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a06      	ldr	r2, [pc, #24]	; (8005670 <vApplicationGetIdleTaskMemory+0x30>)
 8005656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	601a      	str	r2, [r3, #0]
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000030 	.word	0x20000030
 8005670:	2000008c 	.word	0x2000008c

08005674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4a06      	ldr	r2, [pc, #24]	; (80056a4 <vApplicationGetTimerTaskMemory+0x30>)
 800568a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	2000028c 	.word	0x2000028c
 80056a4:	200002e8 	.word	0x200002e8

080056a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f103 0208 	add.w	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f103 0208 	add.w	r2, r3, #8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0208 	add.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d103      	bne.n	800576a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e00c      	b.n	8005784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3308      	adds	r3, #8
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e002      	b.n	8005778 <vListInsert+0x2e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	d2f6      	bcs.n	8005772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	601a      	str	r2, [r3, #0]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6852      	ldr	r2, [r2, #4]
 80057dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d103      	bne.n	80057f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	e7fe      	b.n	8005836 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005838:	f002 fbc0 	bl	8007fbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	68f9      	ldr	r1, [r7, #12]
 8005846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005868:	3b01      	subs	r3, #1
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01a      	beq.n	80058cc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3310      	adds	r3, #16
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fbbc 	bl	8007018 <xTaskRemoveFromEventList>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <xQueueGenericReset+0xcc>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	e009      	b.n	80058cc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3310      	adds	r3, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fef3 	bl	80056a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3324      	adds	r3, #36	; 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff feee 	bl	80056a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058cc:	f002 fba4 	bl	8008018 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058d0:	2301      	movs	r3, #1
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <xQueueGenericCreateStatic+0x28>
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
 8005906:	e7fe      	b.n	8005906 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <xQueueGenericCreateStatic+0x42>
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	e7fe      	b.n	8005920 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <xQueueGenericCreateStatic+0x4e>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <xQueueGenericCreateStatic+0x52>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <xQueueGenericCreateStatic+0x54>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <xQueueGenericCreateStatic+0x6c>
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	e7fe      	b.n	800594a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d102      	bne.n	8005958 <xQueueGenericCreateStatic+0x78>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <xQueueGenericCreateStatic+0x7c>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <xQueueGenericCreateStatic+0x7e>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <xQueueGenericCreateStatic+0x96>
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	e7fe      	b.n	8005974 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005976:	2350      	movs	r3, #80	; 0x50
 8005978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2b50      	cmp	r3, #80	; 0x50
 800597e:	d009      	beq.n	8005994 <xQueueGenericCreateStatic+0xb4>
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e7fe      	b.n	8005992 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f842 	bl	8005a3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xQueueGenericCreate+0x28>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e7fe      	b.n	80059ea <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	e004      	b.n	8005a02 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	fb02 f303 	mul.w	r3, r2, r3
 8005a00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3350      	adds	r3, #80	; 0x50
 8005a06:	4618      	mov	r0, r3
 8005a08:	f002 fbf2 	bl	80081f0 <pvPortMalloc>
 8005a0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	3350      	adds	r3, #80	; 0x50
 8005a18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a22:	79fa      	ldrb	r2, [r7, #7]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f805 	bl	8005a3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005a34:	69bb      	ldr	r3, [r7, #24]
	}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e002      	b.n	8005a60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	69b8      	ldr	r0, [r7, #24]
 8005a70:	f7ff fece 	bl	8005810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <xQueueCreateCountingSemaphoreStatic+0x26>
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d909      	bls.n	8005ac6 <xQueueCreateCountingSemaphoreStatic+0x42>
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2100      	movs	r1, #0
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff ff05 	bl	80058e0 <xQueueGenericCreateStatic>
 8005ad6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
	}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <xQueueCreateCountingSemaphore+0x24>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	e7fe      	b.n	8005b10 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d909      	bls.n	8005b2e <xQueueCreateCountingSemaphore+0x40>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e7fe      	b.n	8005b2c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b2e:	2202      	movs	r2, #2
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ff46 	bl	80059c4 <xQueueGenericCreate>
 8005b38:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b46:	697b      	ldr	r3, [r7, #20]
	}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08e      	sub	sp, #56	; 0x38
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <xQueueGenericSend+0x30>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7e:	e7fe      	b.n	8005b7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <xQueueGenericSend+0x3e>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <xQueueGenericSend+0x42>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <xQueueGenericSend+0x44>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <xQueueGenericSend+0x5c>
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8005baa:	e7fe      	b.n	8005baa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d103      	bne.n	8005bba <xQueueGenericSend+0x6a>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <xQueueGenericSend+0x6e>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericSend+0x70>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <xQueueGenericSend+0x88>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	e7fe      	b.n	8005bd6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bd8:	f001 fbda 	bl	8007390 <xTaskGetSchedulerState>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <xQueueGenericSend+0x98>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <xQueueGenericSend+0x9c>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <xQueueGenericSend+0x9e>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <xQueueGenericSend+0xb6>
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c06:	f002 f9d9 	bl	8007fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <xQueueGenericSend+0xcc>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d129      	bne.n	8005c70 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c22:	f000 fc48 	bl	80064b6 <prvCopyDataToQueue>
 8005c26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 f9ef 	bl	8007018 <xTaskRemoveFromEventList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c40:	4b3f      	ldr	r3, [pc, #252]	; (8005d40 <xQueueGenericSend+0x1f0>)
 8005c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	e00a      	b.n	8005c68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c58:	4b39      	ldr	r3, [pc, #228]	; (8005d40 <xQueueGenericSend+0x1f0>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c68:	f002 f9d6 	bl	8008018 <vPortExitCritical>
				return pdPASS;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e063      	b.n	8005d38 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c76:	f002 f9cf 	bl	8008018 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e05c      	b.n	8005d38 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fa27 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c92:	f002 f9c1 	bl	8008018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c96:	f000 ff9d 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c9a:	f002 f98f 	bl	8007fbc <vPortEnterCritical>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d103      	bne.n	8005cb4 <xQueueGenericSend+0x164>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSend+0x17a>
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cca:	f002 f9a5 	bl	8008018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cce:	1d3a      	adds	r2, r7, #4
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fa16 	bl	8007108 <xTaskCheckForTimeOut>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d124      	bne.n	8005d2c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ce4:	f000 fcdf 	bl	80066a6 <prvIsQueueFull>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d018      	beq.n	8005d20 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	3310      	adds	r3, #16
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f940 	bl	8006f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfe:	f000 fc6a 	bl	80065d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d02:	f000 ff75 	bl	8006bf0 <xTaskResumeAll>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f47f af7c 	bne.w	8005c06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <xQueueGenericSend+0x1f0>)
 8005d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	e772      	b.n	8005c06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d22:	f000 fc58 	bl	80065d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d26:	f000 ff63 	bl	8006bf0 <xTaskResumeAll>
 8005d2a:	e76c      	b.n	8005c06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2e:	f000 fc52 	bl	80065d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d32:	f000 ff5d 	bl	8006bf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d36:	2300      	movs	r3, #0
		}
	}
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3738      	adds	r7, #56	; 0x38
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d109      	bne.n	8005d70 <xQueueGenericSendFromISR+0x2c>
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	e7fe      	b.n	8005d6e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSendFromISR+0x3a>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <xQueueGenericSendFromISR+0x3e>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueGenericSendFromISR+0x40>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <xQueueGenericSendFromISR+0x58>
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	e7fe      	b.n	8005d9a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d103      	bne.n	8005daa <xQueueGenericSendFromISR+0x66>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <xQueueGenericSendFromISR+0x6a>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <xQueueGenericSendFromISR+0x6c>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d109      	bne.n	8005dc8 <xQueueGenericSendFromISR+0x84>
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e7fe      	b.n	8005dc6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dc8:	f002 f9d4 	bl	8008174 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dcc:	f3ef 8211 	mrs	r2, BASEPRI
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	61ba      	str	r2, [r7, #24]
 8005de2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005de4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d302      	bcc.n	8005dfa <xQueueGenericSendFromISR+0xb6>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d12c      	bne.n	8005e54 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0a:	f000 fb54 	bl	80064b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d112      	bne.n	8005e3e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f8f7 	bl	8007018 <xTaskRemoveFromEventList>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e007      	b.n	8005e4e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	b25a      	sxtb	r2, r3
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e52:	e001      	b.n	8005e58 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3738      	adds	r7, #56	; 0x38
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08e      	sub	sp, #56	; 0x38
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d109      	bne.n	8005e94 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	623b      	str	r3, [r7, #32]
 8005e92:	e7fe      	b.n	8005e92 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <xQueueGiveFromISR+0x44>
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e7fe      	b.n	8005eae <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <xQueueGiveFromISR+0x54>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <xQueueGiveFromISR+0x58>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <xQueueGiveFromISR+0x5a>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d109      	bne.n	8005ede <xQueueGiveFromISR+0x72>
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	e7fe      	b.n	8005edc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ede:	f002 f949 	bl	8008174 <vPortValidateInterruptPriority>
	__asm volatile
 8005ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	617a      	str	r2, [r7, #20]
 8005ef8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005efa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d22b      	bcs.n	8005f66 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d112      	bne.n	8005f50 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	3324      	adds	r3, #36	; 0x24
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f86e 	bl	8007018 <xTaskRemoveFromEventList>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e007      	b.n	8005f60 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f54:	3301      	adds	r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	b25a      	sxtb	r2, r3
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f60:	2301      	movs	r3, #1
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
 8005f64:	e001      	b.n	8005f6a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3738      	adds	r7, #56	; 0x38
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <xQueueReceive+0x2e>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	e7fe      	b.n	8005fac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <xQueueReceive+0x3c>
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <xQueueReceive+0x40>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <xQueueReceive+0x42>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <xQueueReceive+0x5a>
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fda:	f001 f9d9 	bl	8007390 <xTaskGetSchedulerState>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <xQueueReceive+0x6a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <xQueueReceive+0x6e>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <xQueueReceive+0x70>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <xQueueReceive+0x88>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e7fe      	b.n	8006006 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006008:	f001 ffd8 	bl	8007fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01f      	beq.n	8006058 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601c:	f000 fab5 	bl	800658a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	1e5a      	subs	r2, r3, #1
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00f      	beq.n	8006050 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	3310      	adds	r3, #16
 8006034:	4618      	mov	r0, r3
 8006036:	f000 ffef 	bl	8007018 <xTaskRemoveFromEventList>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006040:	4b3c      	ldr	r3, [pc, #240]	; (8006134 <xQueueReceive+0x1b4>)
 8006042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006050:	f001 ffe2 	bl	8008018 <vPortExitCritical>
				return pdPASS;
 8006054:	2301      	movs	r3, #1
 8006056:	e069      	b.n	800612c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800605e:	f001 ffdb 	bl	8008018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006062:	2300      	movs	r3, #0
 8006064:	e062      	b.n	800612c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d106      	bne.n	800607a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800606c:	f107 0310 	add.w	r3, r7, #16
 8006070:	4618      	mov	r0, r3
 8006072:	f001 f833 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006076:	2301      	movs	r3, #1
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800607a:	f001 ffcd 	bl	8008018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800607e:	f000 fda9 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006082:	f001 ff9b 	bl	8007fbc <vPortEnterCritical>
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800608c:	b25b      	sxtb	r3, r3
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d103      	bne.n	800609c <xQueueReceive+0x11c>
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d103      	bne.n	80060b2 <xQueueReceive+0x132>
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b2:	f001 ffb1 	bl	8008018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060b6:	1d3a      	adds	r2, r7, #4
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 f822 	bl	8007108 <xTaskCheckForTimeOut>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d123      	bne.n	8006112 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060cc:	f000 fad5 	bl	800667a <prvIsQueueEmpty>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	3324      	adds	r3, #36	; 0x24
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ff4c 	bl	8006f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e6:	f000 fa76 	bl	80065d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060ea:	f000 fd81 	bl	8006bf0 <xTaskResumeAll>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d189      	bne.n	8006008 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <xQueueReceive+0x1b4>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	e780      	b.n	8006008 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006108:	f000 fa65 	bl	80065d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800610c:	f000 fd70 	bl	8006bf0 <xTaskResumeAll>
 8006110:	e77a      	b.n	8006008 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006114:	f000 fa5f 	bl	80065d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006118:	f000 fd6a 	bl	8006bf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800611c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611e:	f000 faac 	bl	800667a <prvIsQueueEmpty>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	f43f af6f 	beq.w	8006008 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800612a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800612c:	4618      	mov	r0, r3
 800612e:	3730      	adds	r7, #48	; 0x30
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	; 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006142:	2300      	movs	r3, #0
 8006144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800614a:	2300      	movs	r3, #0
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <xQueueSemaphoreTake+0x30>
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	e7fe      	b.n	8006166 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <xQueueSemaphoreTake+0x4c>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	e7fe      	b.n	8006182 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006184:	f001 f904 	bl	8007390 <xTaskGetSchedulerState>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d102      	bne.n	8006194 <xQueueSemaphoreTake+0x5c>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <xQueueSemaphoreTake+0x60>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <xQueueSemaphoreTake+0x62>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d109      	bne.n	80061b2 <xQueueSemaphoreTake+0x7a>
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	e7fe      	b.n	80061b0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80061b2:	f001 ff03 	bl	8007fbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d024      	beq.n	800620c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80061d2:	f001 fa59 	bl	8007688 <pvTaskIncrementMutexHeldCount>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	3310      	adds	r3, #16
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 ff15 	bl	8007018 <xTaskRemoveFromEventList>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061f4:	4b53      	ldr	r3, [pc, #332]	; (8006344 <xQueueSemaphoreTake+0x20c>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006204:	f001 ff08 	bl	8008018 <vPortExitCritical>
				return pdPASS;
 8006208:	2301      	movs	r3, #1
 800620a:	e096      	b.n	800633a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d110      	bne.n	8006234 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <xQueueSemaphoreTake+0xf4>
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e7fe      	b.n	800622a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800622c:	f001 fef4 	bl	8008018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006230:	2300      	movs	r3, #0
 8006232:	e082      	b.n	800633a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	4618      	mov	r0, r3
 8006240:	f000 ff4c 	bl	80070dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006248:	f001 fee6 	bl	8008018 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800624c:	f000 fcc2 	bl	8006bd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006250:	f001 feb4 	bl	8007fbc <vPortEnterCritical>
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800625a:	b25b      	sxtb	r3, r3
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d103      	bne.n	800626a <xQueueSemaphoreTake+0x132>
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006270:	b25b      	sxtb	r3, r3
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d103      	bne.n	8006280 <xQueueSemaphoreTake+0x148>
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006280:	f001 feca 	bl	8008018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006284:	463a      	mov	r2, r7
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f000 ff3b 	bl	8007108 <xTaskCheckForTimeOut>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d132      	bne.n	80062fe <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800629a:	f000 f9ee 	bl	800667a <prvIsQueueEmpty>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d026      	beq.n	80062f2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80062ac:	f001 fe86 	bl	8007fbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f889 	bl	80073cc <xTaskPriorityInherit>
 80062ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80062bc:	f001 feac 	bl	8008018 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	3324      	adds	r3, #36	; 0x24
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fe57 	bl	8006f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062d0:	f000 f981 	bl	80065d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062d4:	f000 fc8c 	bl	8006bf0 <xTaskResumeAll>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f47f af69 	bne.w	80061b2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <xQueueSemaphoreTake+0x20c>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	e75f      	b.n	80061b2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062f4:	f000 f96f 	bl	80065d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062f8:	f000 fc7a 	bl	8006bf0 <xTaskResumeAll>
 80062fc:	e759      	b.n	80061b2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006300:	f000 f969 	bl	80065d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006304:	f000 fc74 	bl	8006bf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800630a:	f000 f9b6 	bl	800667a <prvIsQueueEmpty>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f43f af4e 	beq.w	80061b2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800631c:	f001 fe4e 	bl	8007fbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006322:	f000 f8b0 	bl	8006486 <prvGetDisinheritPriorityAfterTimeout>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800632e:	4618      	mov	r0, r3
 8006330:	f001 f926 	bl	8007580 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006334:	f001 fe70 	bl	8008018 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006338:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800633a:	4618      	mov	r0, r3
 800633c:	3738      	adds	r7, #56	; 0x38
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08e      	sub	sp, #56	; 0x38
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <xQueueReceiveFromISR+0x2a>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	e7fe      	b.n	8006370 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <xQueueReceiveFromISR+0x38>
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <xQueueReceiveFromISR+0x3c>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <xQueueReceiveFromISR+0x3e>
 8006384:	2300      	movs	r3, #0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <xQueueReceiveFromISR+0x56>
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e7fe      	b.n	800639c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800639e:	f001 fee9 	bl	8008174 <vPortValidateInterruptPriority>
	__asm volatile
 80063a2:	f3ef 8211 	mrs	r2, BASEPRI
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	61ba      	str	r2, [r7, #24]
 80063b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d02f      	beq.n	800642a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063d8:	f000 f8d7 	bl	800658a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	1e5a      	subs	r2, r3, #1
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80063e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d112      	bne.n	8006414 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	3310      	adds	r3, #16
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fe0c 	bl	8007018 <xTaskRemoveFromEventList>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00e      	beq.n	8006424 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e007      	b.n	8006424 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006418:	3301      	adds	r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	b25a      	sxtb	r2, r3
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006424:	2301      	movs	r3, #1
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
 8006428:	e001      	b.n	800642e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800642a:	2300      	movs	r3, #0
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800643a:	4618      	mov	r0, r3
 800643c:	3738      	adds	r7, #56	; 0x38
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <vQueueDelete+0x26>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	e7fe      	b.n	8006466 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f95d 	bl	8006728 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f001 ff7b 	bl	8008374 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e001      	b.n	80064a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064a8:	68fb      	ldr	r3, [r7, #12]
	}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10d      	bne.n	80064f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d14d      	bne.n	8006578 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ffe1 	bl	80074a8 <xTaskPriorityDisinherit>
 80064e6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	e043      	b.n	8006578 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d119      	bne.n	800652a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6898      	ldr	r0, [r3, #8]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	461a      	mov	r2, r3
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	f002 f86f 	bl	80085e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	441a      	add	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d32b      	bcc.n	8006578 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	e026      	b.n	8006578 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68d8      	ldr	r0, [r3, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	461a      	mov	r2, r3
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	f002 f855 	bl	80085e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	425b      	negs	r3, r3
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d207      	bcs.n	8006566 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	425b      	negs	r3, r3
 8006560:	441a      	add	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d105      	bne.n	8006578 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3b01      	subs	r3, #1
 8006576:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006580:	697b      	ldr	r3, [r7, #20]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d018      	beq.n	80065ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	441a      	add	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d303      	bcc.n	80065be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68d9      	ldr	r1, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	461a      	mov	r2, r3
 80065c8:	6838      	ldr	r0, [r7, #0]
 80065ca:	f002 f80b 	bl	80085e4 <memcpy>
	}
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065de:	f001 fced 	bl	8007fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ea:	e011      	b.n	8006610 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d012      	beq.n	800661a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fd0d 	bl	8007018 <xTaskRemoveFromEventList>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006604:	f000 fde0 	bl	80071c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	3b01      	subs	r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dce9      	bgt.n	80065ec <prvUnlockQueue+0x16>
 8006618:	e000      	b.n	800661c <prvUnlockQueue+0x46>
					break;
 800661a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006624:	f001 fcf8 	bl	8008018 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006628:	f001 fcc8 	bl	8007fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006632:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006634:	e011      	b.n	800665a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d012      	beq.n	8006664 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3310      	adds	r3, #16
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fce8 	bl	8007018 <xTaskRemoveFromEventList>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800664e:	f000 fdbb 	bl	80071c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	3b01      	subs	r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800665a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	dce9      	bgt.n	8006636 <prvUnlockQueue+0x60>
 8006662:	e000      	b.n	8006666 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006664:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	22ff      	movs	r2, #255	; 0xff
 800666a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800666e:	f001 fcd3 	bl	8008018 <vPortExitCritical>
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006682:	f001 fc9b 	bl	8007fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800668e:	2301      	movs	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e001      	b.n	8006698 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006698:	f001 fcbe 	bl	8008018 <vPortExitCritical>

	return xReturn;
 800669c:	68fb      	ldr	r3, [r7, #12]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066ae:	f001 fc85 	bl	8007fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d102      	bne.n	80066c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066be:	2301      	movs	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e001      	b.n	80066c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066c8:	f001 fca6 	bl	8008018 <vPortExitCritical>

	return xReturn;
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e014      	b.n	8006712 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066e8:	4a0e      	ldr	r2, [pc, #56]	; (8006724 <vQueueAddToRegistry+0x4c>)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066f4:	490b      	ldr	r1, [pc, #44]	; (8006724 <vQueueAddToRegistry+0x4c>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <vQueueAddToRegistry+0x4c>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800670a:	e005      	b.n	8006718 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b07      	cmp	r3, #7
 8006716:	d9e7      	bls.n	80066e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20004d34 	.word	0x20004d34

08006728 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e016      	b.n	8006764 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006736:	4a10      	ldr	r2, [pc, #64]	; (8006778 <vQueueUnregisterQueue+0x50>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d10b      	bne.n	800675e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006746:	4a0c      	ldr	r2, [pc, #48]	; (8006778 <vQueueUnregisterQueue+0x50>)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2100      	movs	r1, #0
 800674c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006750:	4a09      	ldr	r2, [pc, #36]	; (8006778 <vQueueUnregisterQueue+0x50>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	2200      	movs	r2, #0
 800675a:	605a      	str	r2, [r3, #4]
				break;
 800675c:	e005      	b.n	800676a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b07      	cmp	r3, #7
 8006768:	d9e5      	bls.n	8006736 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20004d34 	.word	0x20004d34

0800677c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800678c:	f001 fc16 	bl	8007fbc <vPortEnterCritical>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <vQueueWaitForMessageRestricted+0x2a>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ac:	b25b      	sxtb	r3, r3
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d103      	bne.n	80067bc <vQueueWaitForMessageRestricted+0x40>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067bc:	f001 fc2c 	bl	8008018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	3324      	adds	r3, #36	; 0x24
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fbf7 	bl	8006fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7ff fefd 	bl	80065d6 <prvUnlockQueue>
	}
 80067dc:	bf00      	nop
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	; 0x38
 80067e8:	af04      	add	r7, sp, #16
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <xTaskCreateStatic+0x28>
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	623b      	str	r3, [r7, #32]
 800680a:	e7fe      	b.n	800680a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800680c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <xTaskCreateStatic+0x42>
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	e7fe      	b.n	8006824 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006826:	235c      	movs	r3, #92	; 0x5c
 8006828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b5c      	cmp	r3, #92	; 0x5c
 800682e:	d009      	beq.n	8006844 <xTaskCreateStatic+0x60>
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e7fe      	b.n	8006842 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01e      	beq.n	8006888 <xTaskCreateStatic+0xa4>
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006858:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006862:	2300      	movs	r3, #0
 8006864:	9303      	str	r3, [sp, #12]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	9302      	str	r3, [sp, #8]
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f850 	bl	8006920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006882:	f000 f8d3 	bl	8006a2c <prvAddNewTaskToReadyList>
 8006886:	e001      	b.n	800688c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800688c:	697b      	ldr	r3, [r7, #20]
	}
 800688e:	4618      	mov	r0, r3
 8006890:	3728      	adds	r7, #40	; 0x28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006896:	b580      	push	{r7, lr}
 8006898:	b08c      	sub	sp, #48	; 0x30
 800689a:	af04      	add	r7, sp, #16
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f001 fca0 	bl	80081f0 <pvPortMalloc>
 80068b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80068b8:	205c      	movs	r0, #92	; 0x5c
 80068ba:	f001 fc99 	bl	80081f0 <pvPortMalloc>
 80068be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
 80068cc:	e005      	b.n	80068da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ce:	6978      	ldr	r0, [r7, #20]
 80068d0:	f001 fd50 	bl	8008374 <vPortFree>
 80068d4:	e001      	b.n	80068da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068e8:	88fa      	ldrh	r2, [r7, #6]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f80e 	bl	8006920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006904:	69f8      	ldr	r0, [r7, #28]
 8006906:	f000 f891 	bl	8006a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800690a:	2301      	movs	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e002      	b.n	8006916 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006910:	f04f 33ff 	mov.w	r3, #4294967295
 8006914:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006916:	69bb      	ldr	r3, [r7, #24]
	}
 8006918:	4618      	mov	r0, r3
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	461a      	mov	r2, r3
 8006938:	21a5      	movs	r1, #165	; 0xa5
 800693a:	f001 fe5e 	bl	80085fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006948:	3b01      	subs	r3, #1
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f023 0307 	bic.w	r3, r3, #7
 8006956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <prvInitialiseNewTask+0x56>
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e7fe      	b.n	8006974 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
 800697a:	e012      	b.n	80069a2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	7819      	ldrb	r1, [r3, #0]
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	4413      	add	r3, r2
 800698a:	3334      	adds	r3, #52	; 0x34
 800698c:	460a      	mov	r2, r1
 800698e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d006      	beq.n	80069aa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3301      	adds	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	2b0f      	cmp	r3, #15
 80069a6:	d9e9      	bls.n	800697c <prvInitialiseNewTask+0x5c>
 80069a8:	e000      	b.n	80069ac <prvInitialiseNewTask+0x8c>
		{
			break;
 80069aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b37      	cmp	r3, #55	; 0x37
 80069b8:	d901      	bls.n	80069be <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069ba:	2337      	movs	r3, #55	; 0x37
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2200      	movs	r2, #0
 80069ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fe fe87 	bl	80056e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	3318      	adds	r3, #24
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fe82 	bl	80056e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	2200      	movs	r2, #0
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	69b8      	ldr	r0, [r7, #24]
 8006a0e:	f001 f9ad 	bl	8007d6c <pxPortInitialiseStack>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a24:	bf00      	nop
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a34:	f001 fac2 	bl	8007fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a38:	4b2d      	ldr	r3, [pc, #180]	; (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a2c      	ldr	r2, [pc, #176]	; (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a4a:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a50:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <prvAddNewTaskToReadyList+0xc4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d110      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a58:	f000 fbda 	bl	8007210 <prvInitialiseTaskLists>
 8006a5c:	e00d      	b.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a5e:	4b26      	ldr	r3, [pc, #152]	; (8006af8 <prvAddNewTaskToReadyList+0xcc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a66:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d802      	bhi.n	8006a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a74:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a7a:	4b20      	ldr	r3, [pc, #128]	; (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a1e      	ldr	r2, [pc, #120]	; (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006a82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	; (8006afc <prvAddNewTaskToReadyList+0xd0>)
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <prvAddNewTaskToReadyList+0xd4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d903      	bls.n	8006aa0 <prvAddNewTaskToReadyList+0x74>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <prvAddNewTaskToReadyList+0xd4>)
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <prvAddNewTaskToReadyList+0xd8>)
 8006aae:	441a      	add	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f7fe fe23 	bl	8005702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006abc:	f001 faac 	bl	8008018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <prvAddNewTaskToReadyList+0xcc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00e      	beq.n	8006ae6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <prvAddNewTaskToReadyList+0xc8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d207      	bcs.n	8006ae6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ad6:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvAddNewTaskToReadyList+0xdc>)
 8006ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000bbc 	.word	0x20000bbc
 8006af4:	200006e8 	.word	0x200006e8
 8006af8:	20000bc8 	.word	0x20000bc8
 8006afc:	20000bd8 	.word	0x20000bd8
 8006b00:	20000bc4 	.word	0x20000bc4
 8006b04:	200006ec 	.word	0x200006ec
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	; 0x28
 8006b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b1a:	463a      	mov	r2, r7
 8006b1c:	1d39      	adds	r1, r7, #4
 8006b1e:	f107 0308 	add.w	r3, r7, #8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe fd8c 	bl	8005640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	9202      	str	r2, [sp, #8]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	2300      	movs	r3, #0
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	2300      	movs	r3, #0
 8006b38:	460a      	mov	r2, r1
 8006b3a:	4920      	ldr	r1, [pc, #128]	; (8006bbc <vTaskStartScheduler+0xb0>)
 8006b3c:	4820      	ldr	r0, [pc, #128]	; (8006bc0 <vTaskStartScheduler+0xb4>)
 8006b3e:	f7ff fe51 	bl	80067e4 <xTaskCreateStatic>
 8006b42:	4602      	mov	r2, r0
 8006b44:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <vTaskStartScheduler+0xb8>)
 8006b46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <vTaskStartScheduler+0xb8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e001      	b.n	8006b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d102      	bne.n	8006b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b60:	f000 fdfa 	bl	8007758 <xTimerCreateTimerTask>
 8006b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d115      	bne.n	8006b98 <vTaskStartScheduler+0x8c>
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <vTaskStartScheduler+0xbc>)
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <vTaskStartScheduler+0xc0>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <vTaskStartScheduler+0xc4>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b92:	f001 f975 	bl	8007e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b96:	e00d      	b.n	8006bb4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d109      	bne.n	8006bb4 <vTaskStartScheduler+0xa8>
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	e7fe      	b.n	8006bb2 <vTaskStartScheduler+0xa6>
}
 8006bb4:	bf00      	nop
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	08008640 	.word	0x08008640
 8006bc0:	080071e1 	.word	0x080071e1
 8006bc4:	20000be0 	.word	0x20000be0
 8006bc8:	20000bdc 	.word	0x20000bdc
 8006bcc:	20000bc8 	.word	0x20000bc8
 8006bd0:	20000bc0 	.word	0x20000bc0

08006bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bd8:	4b04      	ldr	r3, [pc, #16]	; (8006bec <vTaskSuspendAll+0x18>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a03      	ldr	r2, [pc, #12]	; (8006bec <vTaskSuspendAll+0x18>)
 8006be0:	6013      	str	r3, [r2, #0]
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	20000be4 	.word	0x20000be4

08006bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfe:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <xTaskResumeAll+0x114>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <xTaskResumeAll+0x2a>
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	e7fe      	b.n	8006c18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c1a:	f001 f9cf 	bl	8007fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c1e:	4b39      	ldr	r3, [pc, #228]	; (8006d04 <xTaskResumeAll+0x114>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3b01      	subs	r3, #1
 8006c24:	4a37      	ldr	r2, [pc, #220]	; (8006d04 <xTaskResumeAll+0x114>)
 8006c26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c28:	4b36      	ldr	r3, [pc, #216]	; (8006d04 <xTaskResumeAll+0x114>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d162      	bne.n	8006cf6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c30:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <xTaskResumeAll+0x118>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d05e      	beq.n	8006cf6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c38:	e02f      	b.n	8006c9a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c3a:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <xTaskResumeAll+0x11c>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3318      	adds	r3, #24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fdb8 	bl	80057bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fdb3 	bl	80057bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <xTaskResumeAll+0x120>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d903      	bls.n	8006c6a <xTaskResumeAll+0x7a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <xTaskResumeAll+0x120>)
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <xTaskResumeAll+0x124>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7fe fd3e 	bl	8005702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <xTaskResumeAll+0x128>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d302      	bcc.n	8006c9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c94:	4b21      	ldr	r3, [pc, #132]	; (8006d1c <xTaskResumeAll+0x12c>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c9a:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <xTaskResumeAll+0x11c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1cb      	bne.n	8006c3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ca8:	f000 fb4c 	bl	8007344 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cac:	4b1c      	ldr	r3, [pc, #112]	; (8006d20 <xTaskResumeAll+0x130>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cb8:	f000 f846 	bl	8006d48 <xTaskIncrementTick>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006cc2:	4b16      	ldr	r3, [pc, #88]	; (8006d1c <xTaskResumeAll+0x12c>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f1      	bne.n	8006cb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006cd4:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <xTaskResumeAll+0x130>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cda:	4b10      	ldr	r3, [pc, #64]	; (8006d1c <xTaskResumeAll+0x12c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xTaskResumeAll+0x134>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf6:	f001 f98f 	bl	8008018 <vPortExitCritical>

	return xAlreadyYielded;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000be4 	.word	0x20000be4
 8006d08:	20000bbc 	.word	0x20000bbc
 8006d0c:	20000b7c 	.word	0x20000b7c
 8006d10:	20000bc4 	.word	0x20000bc4
 8006d14:	200006ec 	.word	0x200006ec
 8006d18:	200006e8 	.word	0x200006e8
 8006d1c:	20000bd0 	.word	0x20000bd0
 8006d20:	20000bcc 	.word	0x20000bcc
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <xTaskGetTickCount+0x1c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d34:	687b      	ldr	r3, [r7, #4]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000bc0 	.word	0x20000bc0

08006d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d52:	4b51      	ldr	r3, [pc, #324]	; (8006e98 <xTaskIncrementTick+0x150>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 808d 	bne.w	8006e76 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d5c:	4b4f      	ldr	r3, [pc, #316]	; (8006e9c <xTaskIncrementTick+0x154>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d64:	4a4d      	ldr	r2, [pc, #308]	; (8006e9c <xTaskIncrementTick+0x154>)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11f      	bne.n	8006db0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d70:	4b4b      	ldr	r3, [pc, #300]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <xTaskIncrementTick+0x46>
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	e7fe      	b.n	8006d8c <xTaskIncrementTick+0x44>
 8006d8e:	4b44      	ldr	r3, [pc, #272]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	4b43      	ldr	r3, [pc, #268]	; (8006ea4 <xTaskIncrementTick+0x15c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a41      	ldr	r2, [pc, #260]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4a41      	ldr	r2, [pc, #260]	; (8006ea4 <xTaskIncrementTick+0x15c>)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	4b41      	ldr	r3, [pc, #260]	; (8006ea8 <xTaskIncrementTick+0x160>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	4a3f      	ldr	r2, [pc, #252]	; (8006ea8 <xTaskIncrementTick+0x160>)
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	f000 faca 	bl	8007344 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006db0:	4b3e      	ldr	r3, [pc, #248]	; (8006eac <xTaskIncrementTick+0x164>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d34e      	bcc.n	8006e58 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dba:	4b39      	ldr	r3, [pc, #228]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <xTaskIncrementTick+0x80>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <xTaskIncrementTick+0x82>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dce:	4b37      	ldr	r3, [pc, #220]	; (8006eac <xTaskIncrementTick+0x164>)
 8006dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd4:	601a      	str	r2, [r3, #0]
					break;
 8006dd6:	e03f      	b.n	8006e58 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006dd8:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <xTaskIncrementTick+0x158>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d203      	bcs.n	8006df8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006df0:	4a2e      	ldr	r2, [pc, #184]	; (8006eac <xTaskIncrementTick+0x164>)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6013      	str	r3, [r2, #0]
						break;
 8006df6:	e02f      	b.n	8006e58 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fcdd 	bl	80057bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	3318      	adds	r3, #24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fcd4 	bl	80057bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <xTaskIncrementTick+0x168>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d903      	bls.n	8006e28 <xTaskIncrementTick+0xe0>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <xTaskIncrementTick+0x168>)
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <xTaskIncrementTick+0x16c>)
 8006e36:	441a      	add	r2, r3
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7fe fc5f 	bl	8005702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <xTaskIncrementTick+0x170>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3b3      	bcc.n	8006dba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006e52:	2301      	movs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e56:	e7b0      	b.n	8006dba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e58:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <xTaskIncrementTick+0x170>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	4915      	ldr	r1, [pc, #84]	; (8006eb4 <xTaskIncrementTick+0x16c>)
 8006e60:	4613      	mov	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d907      	bls.n	8006e80 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006e70:	2301      	movs	r3, #1
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e004      	b.n	8006e80 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <xTaskIncrementTick+0x174>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	4a0f      	ldr	r2, [pc, #60]	; (8006ebc <xTaskIncrementTick+0x174>)
 8006e7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <xTaskIncrementTick+0x178>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e8c:	697b      	ldr	r3, [r7, #20]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000be4 	.word	0x20000be4
 8006e9c:	20000bc0 	.word	0x20000bc0
 8006ea0:	20000b74 	.word	0x20000b74
 8006ea4:	20000b78 	.word	0x20000b78
 8006ea8:	20000bd4 	.word	0x20000bd4
 8006eac:	20000bdc 	.word	0x20000bdc
 8006eb0:	20000bc4 	.word	0x20000bc4
 8006eb4:	200006ec 	.word	0x200006ec
 8006eb8:	200006e8 	.word	0x200006e8
 8006ebc:	20000bcc 	.word	0x20000bcc
 8006ec0:	20000bd0 	.word	0x20000bd0

08006ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eca:	4b27      	ldr	r3, [pc, #156]	; (8006f68 <vTaskSwitchContext+0xa4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <vTaskSwitchContext+0xa8>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ed8:	e040      	b.n	8006f5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006eda:	4b24      	ldr	r3, [pc, #144]	; (8006f6c <vTaskSwitchContext+0xa8>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ee0:	4b23      	ldr	r3, [pc, #140]	; (8006f70 <vTaskSwitchContext+0xac>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	e00f      	b.n	8006f08 <vTaskSwitchContext+0x44>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <vTaskSwitchContext+0x3e>
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
 8006f00:	e7fe      	b.n	8006f00 <vTaskSwitchContext+0x3c>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	491a      	ldr	r1, [pc, #104]	; (8006f74 <vTaskSwitchContext+0xb0>)
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0e5      	beq.n	8006ee8 <vTaskSwitchContext+0x24>
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4a13      	ldr	r2, [pc, #76]	; (8006f74 <vTaskSwitchContext+0xb0>)
 8006f28:	4413      	add	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d104      	bne.n	8006f4c <vTaskSwitchContext+0x88>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	4a09      	ldr	r2, [pc, #36]	; (8006f78 <vTaskSwitchContext+0xb4>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4a06      	ldr	r2, [pc, #24]	; (8006f70 <vTaskSwitchContext+0xac>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6013      	str	r3, [r2, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	20000be4 	.word	0x20000be4
 8006f6c:	20000bd0 	.word	0x20000bd0
 8006f70:	20000bc4 	.word	0x20000bc4
 8006f74:	200006ec 	.word	0x200006ec
 8006f78:	200006e8 	.word	0x200006e8

08006f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <vTaskPlaceOnEventList+0x24>
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e7fe      	b.n	8006f9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <vTaskPlaceOnEventList+0x44>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3318      	adds	r3, #24
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fe fbce 	bl	800574a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fae:	2101      	movs	r1, #1
 8006fb0:	6838      	ldr	r0, [r7, #0]
 8006fb2:	f000 fb7d 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
}
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200006e8 	.word	0x200006e8

08006fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <vTaskPlaceOnEventListRestricted+0x26>
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e7fe      	b.n	8006fe8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <vTaskPlaceOnEventListRestricted+0x50>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3318      	adds	r3, #24
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7fe fb85 	bl	8005702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8007002:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007004:	6879      	ldr	r1, [r7, #4]
 8007006:	68b8      	ldr	r0, [r7, #8]
 8007008:	f000 fb52 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
	}
 800700c:	bf00      	nop
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	200006e8 	.word	0x200006e8

08007018 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <xTaskRemoveFromEventList+0x2a>
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e7fe      	b.n	8007040 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3318      	adds	r3, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fbb8 	bl	80057bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704c:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <xTaskRemoveFromEventList+0xac>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d11d      	bne.n	8007090 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f7fe fbaf 	bl	80057bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <xTaskRemoveFromEventList+0xb0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d903      	bls.n	8007072 <xTaskRemoveFromEventList+0x5a>
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706e:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <xTaskRemoveFromEventList+0xb0>)
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a13      	ldr	r2, [pc, #76]	; (80070cc <xTaskRemoveFromEventList+0xb4>)
 8007080:	441a      	add	r2, r3
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe fb3a 	bl	8005702 <vListInsertEnd>
 800708e:	e005      	b.n	800709c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3318      	adds	r3, #24
 8007094:	4619      	mov	r1, r3
 8007096:	480e      	ldr	r0, [pc, #56]	; (80070d0 <xTaskRemoveFromEventList+0xb8>)
 8007098:	f7fe fb33 	bl	8005702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <xTaskRemoveFromEventList+0xbc>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d905      	bls.n	80070b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070ae:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <xTaskRemoveFromEventList+0xc0>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e001      	b.n	80070ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80070ba:	697b      	ldr	r3, [r7, #20]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000be4 	.word	0x20000be4
 80070c8:	20000bc4 	.word	0x20000bc4
 80070cc:	200006ec 	.word	0x200006ec
 80070d0:	20000b7c 	.word	0x20000b7c
 80070d4:	200006e8 	.word	0x200006e8
 80070d8:	20000bd0 	.word	0x20000bd0

080070dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e4:	4b06      	ldr	r3, [pc, #24]	; (8007100 <vTaskInternalSetTimeOutState+0x24>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <vTaskInternalSetTimeOutState+0x28>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20000bd4 	.word	0x20000bd4
 8007104:	20000bc0 	.word	0x20000bc0

08007108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d109      	bne.n	800712c <xTaskCheckForTimeOut+0x24>
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	e7fe      	b.n	800712a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <xTaskCheckForTimeOut+0x3e>
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e7fe      	b.n	8007144 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007146:	f000 ff39 	bl	8007fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800714a:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <xTaskCheckForTimeOut+0xb8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d102      	bne.n	800716a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	e023      	b.n	80071b2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <xTaskCheckForTimeOut+0xbc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d007      	beq.n	8007186 <xTaskCheckForTimeOut+0x7e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	d302      	bcc.n	8007186 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e015      	b.n	80071b2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	429a      	cmp	r2, r3
 800718e:	d20b      	bcs.n	80071a8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff9d 	bl	80070dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e004      	b.n	80071b2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f000 ff31 	bl	8008018 <vPortExitCritical>

	return xReturn;
 80071b6:	69fb      	ldr	r3, [r7, #28]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20000bc0 	.word	0x20000bc0
 80071c4:	20000bd4 	.word	0x20000bd4

080071c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <vTaskMissedYield+0x14>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000bd0 	.word	0x20000bd0

080071e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071e8:	f000 f852 	bl	8007290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <prvIdleTask+0x28>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d9f9      	bls.n	80071e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <prvIdleTask+0x2c>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007204:	e7f0      	b.n	80071e8 <prvIdleTask+0x8>
 8007206:	bf00      	nop
 8007208:	200006ec 	.word	0x200006ec
 800720c:	e000ed04 	.word	0xe000ed04

08007210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007216:	2300      	movs	r3, #0
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	e00c      	b.n	8007236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a12      	ldr	r2, [pc, #72]	; (8007270 <prvInitialiseTaskLists+0x60>)
 8007228:	4413      	add	r3, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fa3c 	bl	80056a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3301      	adds	r3, #1
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b37      	cmp	r3, #55	; 0x37
 800723a:	d9ef      	bls.n	800721c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800723c:	480d      	ldr	r0, [pc, #52]	; (8007274 <prvInitialiseTaskLists+0x64>)
 800723e:	f7fe fa33 	bl	80056a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007242:	480d      	ldr	r0, [pc, #52]	; (8007278 <prvInitialiseTaskLists+0x68>)
 8007244:	f7fe fa30 	bl	80056a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007248:	480c      	ldr	r0, [pc, #48]	; (800727c <prvInitialiseTaskLists+0x6c>)
 800724a:	f7fe fa2d 	bl	80056a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800724e:	480c      	ldr	r0, [pc, #48]	; (8007280 <prvInitialiseTaskLists+0x70>)
 8007250:	f7fe fa2a 	bl	80056a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007254:	480b      	ldr	r0, [pc, #44]	; (8007284 <prvInitialiseTaskLists+0x74>)
 8007256:	f7fe fa27 	bl	80056a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <prvInitialiseTaskLists+0x78>)
 800725c:	4a05      	ldr	r2, [pc, #20]	; (8007274 <prvInitialiseTaskLists+0x64>)
 800725e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <prvInitialiseTaskLists+0x7c>)
 8007262:	4a05      	ldr	r2, [pc, #20]	; (8007278 <prvInitialiseTaskLists+0x68>)
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200006ec 	.word	0x200006ec
 8007274:	20000b4c 	.word	0x20000b4c
 8007278:	20000b60 	.word	0x20000b60
 800727c:	20000b7c 	.word	0x20000b7c
 8007280:	20000b90 	.word	0x20000b90
 8007284:	20000ba8 	.word	0x20000ba8
 8007288:	20000b74 	.word	0x20000b74
 800728c:	20000b78 	.word	0x20000b78

08007290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007296:	e019      	b.n	80072cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007298:	f000 fe90 	bl	8007fbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800729c:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <prvCheckTasksWaitingTermination+0x4c>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fa87 	bl	80057bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ae:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <prvCheckTasksWaitingTermination+0x50>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <prvCheckTasksWaitingTermination+0x50>)
 80072b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072c2:	f000 fea9 	bl	8008018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f80e 	bl	80072e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e1      	bne.n	8007298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20000b90 	.word	0x20000b90
 80072e0:	20000bbc 	.word	0x20000bbc
 80072e4:	20000ba4 	.word	0x20000ba4

080072e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 f838 	bl	8008374 <vPortFree>
				vPortFree( pxTCB );
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f835 	bl	8008374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800730a:	e017      	b.n	800733c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007312:	2b01      	cmp	r3, #1
 8007314:	d103      	bne.n	800731e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 f82c 	bl	8008374 <vPortFree>
	}
 800731c:	e00e      	b.n	800733c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007324:	2b02      	cmp	r3, #2
 8007326:	d009      	beq.n	800733c <prvDeleteTCB+0x54>
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e7fe      	b.n	800733a <prvDeleteTCB+0x52>
	}
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <prvResetNextTaskUnblockTime+0x44>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <prvResetNextTaskUnblockTime+0x14>
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <prvResetNextTaskUnblockTime+0x16>
 8007358:	2300      	movs	r3, #0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <prvResetNextTaskUnblockTime+0x48>)
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007366:	e008      	b.n	800737a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <prvResetNextTaskUnblockTime+0x44>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4a05      	ldr	r2, [pc, #20]	; (800738c <prvResetNextTaskUnblockTime+0x48>)
 8007378:	6013      	str	r3, [r2, #0]
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000b74 	.word	0x20000b74
 800738c:	20000bdc 	.word	0x20000bdc

08007390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <xTaskGetSchedulerState+0x34>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800739e:	2301      	movs	r3, #1
 80073a0:	607b      	str	r3, [r7, #4]
 80073a2:	e008      	b.n	80073b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <xTaskGetSchedulerState+0x38>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073ac:	2302      	movs	r3, #2
 80073ae:	607b      	str	r3, [r7, #4]
 80073b0:	e001      	b.n	80073b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073b2:	2300      	movs	r3, #0
 80073b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073b6:	687b      	ldr	r3, [r7, #4]
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	20000bc8 	.word	0x20000bc8
 80073c8:	20000be4 	.word	0x20000be4

080073cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d056      	beq.n	8007490 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4b2d      	ldr	r3, [pc, #180]	; (800749c <xTaskPriorityInherit+0xd0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d246      	bcs.n	800747e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	db06      	blt.n	8007406 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <xTaskPriorityInherit+0xd0>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6959      	ldr	r1, [r3, #20]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4a22      	ldr	r2, [pc, #136]	; (80074a0 <xTaskPriorityInherit+0xd4>)
 8007418:	4413      	add	r3, r2
 800741a:	4299      	cmp	r1, r3
 800741c:	d101      	bne.n	8007422 <xTaskPriorityInherit+0x56>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xTaskPriorityInherit+0x58>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d022      	beq.n	800746e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	3304      	adds	r3, #4
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe f9c5 	bl	80057bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007432:	4b1a      	ldr	r3, [pc, #104]	; (800749c <xTaskPriorityInherit+0xd0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <xTaskPriorityInherit+0xd8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d903      	bls.n	8007450 <xTaskPriorityInherit+0x84>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <xTaskPriorityInherit+0xd8>)
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <xTaskPriorityInherit+0xd4>)
 800745e:	441a      	add	r2, r3
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe f94b 	bl	8005702 <vListInsertEnd>
 800746c:	e004      	b.n	8007478 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <xTaskPriorityInherit+0xd0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e008      	b.n	8007490 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <xTaskPriorityInherit+0xd0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	429a      	cmp	r2, r3
 800748a:	d201      	bcs.n	8007490 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007490:	68fb      	ldr	r3, [r7, #12]
	}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	200006e8 	.word	0x200006e8
 80074a0:	200006ec 	.word	0x200006ec
 80074a4:	20000bc4 	.word	0x20000bc4

080074a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d054      	beq.n	8007568 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074be:	4b2d      	ldr	r3, [pc, #180]	; (8007574 <xTaskPriorityDisinherit+0xcc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d009      	beq.n	80074dc <xTaskPriorityDisinherit+0x34>
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e7fe      	b.n	80074da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <xTaskPriorityDisinherit+0x50>
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	e7fe      	b.n	80074f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	1e5a      	subs	r2, r3, #1
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750a:	429a      	cmp	r2, r3
 800750c:	d02c      	beq.n	8007568 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007512:	2b00      	cmp	r3, #0
 8007514:	d128      	bne.n	8007568 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	3304      	adds	r3, #4
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe f94e 	bl	80057bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <xTaskPriorityDisinherit+0xd0>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d903      	bls.n	8007548 <xTaskPriorityDisinherit+0xa0>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <xTaskPriorityDisinherit+0xd0>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a09      	ldr	r2, [pc, #36]	; (800757c <xTaskPriorityDisinherit+0xd4>)
 8007556:	441a      	add	r2, r3
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7fe f8cf 	bl	8005702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007568:	697b      	ldr	r3, [r7, #20]
	}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200006e8 	.word	0x200006e8
 8007578:	20000bc4 	.word	0x20000bc4
 800757c:	200006ec 	.word	0x200006ec

08007580 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800758e:	2301      	movs	r3, #1
 8007590:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d06d      	beq.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	2b00      	cmp	r3, #0
 800759e:	d109      	bne.n	80075b4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e7fe      	b.n	80075b2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d902      	bls.n	80075c4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e002      	b.n	80075ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d04f      	beq.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d14a      	bne.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075de:	4b27      	ldr	r3, [pc, #156]	; (800767c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d109      	bne.n	80075fc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	e7fe      	b.n	80075fa <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	db04      	blt.n	800761a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	6959      	ldr	r1, [r3, #20]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4a15      	ldr	r2, [pc, #84]	; (8007680 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800762a:	4413      	add	r3, r2
 800762c:	4299      	cmp	r1, r3
 800762e:	d101      	bne.n	8007634 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007634:	2300      	movs	r3, #0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01c      	beq.n	8007674 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	3304      	adds	r3, #4
 800763e:	4618      	mov	r0, r3
 8007640:	f7fe f8bc 	bl	80057bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d903      	bls.n	8007658 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a06      	ldr	r2, [pc, #24]	; (8007680 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007666:	441a      	add	r2, r3
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fe f847 	bl	8005702 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007674:	bf00      	nop
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	200006e8 	.word	0x200006e8
 8007680:	200006ec 	.word	0x200006ec
 8007684:	20000bc4 	.word	0x20000bc4

08007688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800769a:	3201      	adds	r2, #1
 800769c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 80076a0:	681b      	ldr	r3, [r3, #0]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	200006e8 	.word	0x200006e8

080076b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ba:	4b21      	ldr	r3, [pc, #132]	; (8007740 <prvAddCurrentTaskToDelayedList+0x90>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c0:	4b20      	ldr	r3, [pc, #128]	; (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe f878 	bl	80057bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d10a      	bne.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076da:	4b1a      	ldr	r3, [pc, #104]	; (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4819      	ldr	r0, [pc, #100]	; (8007748 <prvAddCurrentTaskToDelayedList+0x98>)
 80076e4:	f7fe f80d 	bl	8005702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076e8:	e026      	b.n	8007738 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d209      	bcs.n	8007716 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fe f81b 	bl	800574a <vListInsert>
}
 8007714:	e010      	b.n	8007738 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007716:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3304      	adds	r3, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f7fe f811 	bl	800574a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <prvAddCurrentTaskToDelayedList+0xa4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	429a      	cmp	r2, r3
 8007730:	d202      	bcs.n	8007738 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007732:	4a08      	ldr	r2, [pc, #32]	; (8007754 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6013      	str	r3, [r2, #0]
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000bc0 	.word	0x20000bc0
 8007744:	200006e8 	.word	0x200006e8
 8007748:	20000ba8 	.word	0x20000ba8
 800774c:	20000b78 	.word	0x20000b78
 8007750:	20000b74 	.word	0x20000b74
 8007754:	20000bdc 	.word	0x20000bdc

08007758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007762:	f000 fac3 	bl	8007cec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007766:	4b1c      	ldr	r3, [pc, #112]	; (80077d8 <xTimerCreateTimerTask+0x80>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d021      	beq.n	80077b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007776:	1d3a      	adds	r2, r7, #4
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd ff77 	bl	8005674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	9202      	str	r2, [sp, #8]
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	2302      	movs	r3, #2
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	460a      	mov	r2, r1
 8007798:	4910      	ldr	r1, [pc, #64]	; (80077dc <xTimerCreateTimerTask+0x84>)
 800779a:	4811      	ldr	r0, [pc, #68]	; (80077e0 <xTimerCreateTimerTask+0x88>)
 800779c:	f7ff f822 	bl	80067e4 <xTaskCreateStatic>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <xTimerCreateTimerTask+0x8c>)
 80077a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <xTimerCreateTimerTask+0x8c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077ae:	2301      	movs	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d109      	bne.n	80077cc <xTimerCreateTimerTask+0x74>
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	e7fe      	b.n	80077ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80077cc:	697b      	ldr	r3, [r7, #20]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20000c18 	.word	0x20000c18
 80077dc:	08008648 	.word	0x08008648
 80077e0:	08007901 	.word	0x08007901
 80077e4:	20000c1c 	.word	0x20000c1c

080077e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <xTimerGenericCommand+0x2c>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	623b      	str	r3, [r7, #32]
 8007812:	e7fe      	b.n	8007812 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007814:	4b19      	ldr	r3, [pc, #100]	; (800787c <xTimerGenericCommand+0x94>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d02a      	beq.n	8007872 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b05      	cmp	r3, #5
 800782c:	dc18      	bgt.n	8007860 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800782e:	f7ff fdaf 	bl	8007390 <xTaskGetSchedulerState>
 8007832:	4603      	mov	r3, r0
 8007834:	2b02      	cmp	r3, #2
 8007836:	d109      	bne.n	800784c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <xTimerGenericCommand+0x94>)
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	f107 0110 	add.w	r1, r7, #16
 8007840:	2300      	movs	r3, #0
 8007842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007844:	f7fe f984 	bl	8005b50 <xQueueGenericSend>
 8007848:	6278      	str	r0, [r7, #36]	; 0x24
 800784a:	e012      	b.n	8007872 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <xTimerGenericCommand+0x94>)
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	f107 0110 	add.w	r1, r7, #16
 8007854:	2300      	movs	r3, #0
 8007856:	2200      	movs	r2, #0
 8007858:	f7fe f97a 	bl	8005b50 <xQueueGenericSend>
 800785c:	6278      	str	r0, [r7, #36]	; 0x24
 800785e:	e008      	b.n	8007872 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <xTimerGenericCommand+0x94>)
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	f107 0110 	add.w	r1, r7, #16
 8007868:	2300      	movs	r3, #0
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	f7fe fa6a 	bl	8005d44 <xQueueGenericSendFromISR>
 8007870:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007874:	4618      	mov	r0, r3
 8007876:	3728      	adds	r7, #40	; 0x28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000c18 	.word	0x20000c18

08007880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800788a:	4b1c      	ldr	r3, [pc, #112]	; (80078fc <prvProcessExpiredTimer+0x7c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3304      	adds	r3, #4
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd ff8f 	bl	80057bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d121      	bne.n	80078ea <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	18d1      	adds	r1, r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	6978      	ldr	r0, [r7, #20]
 80078b4:	f000 f8c8 	bl	8007a48 <prvInsertTimerInActiveList>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d015      	beq.n	80078ea <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078be:	2300      	movs	r3, #0
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	2300      	movs	r3, #0
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	2100      	movs	r1, #0
 80078c8:	6978      	ldr	r0, [r7, #20]
 80078ca:	f7ff ff8d 	bl	80077e8 <xTimerGenericCommand>
 80078ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <prvProcessExpiredTimer+0x6a>
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e7fe      	b.n	80078e8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	6978      	ldr	r0, [r7, #20]
 80078f0:	4798      	blx	r3
}
 80078f2:	bf00      	nop
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000c10 	.word	0x20000c10

08007900 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f857 	bl	80079c0 <prvGetNextExpireTime>
 8007912:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4619      	mov	r1, r3
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f803 	bl	8007924 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800791e:	f000 f8d5 	bl	8007acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007922:	e7f1      	b.n	8007908 <prvTimerTask+0x8>

08007924 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800792e:	f7ff f951 	bl	8006bd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f866 	bl	8007a08 <prvSampleTimeNow>
 800793c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d130      	bne.n	80079a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <prvProcessTimerOrBlockTask+0x3c>
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	429a      	cmp	r2, r3
 8007950:	d806      	bhi.n	8007960 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007952:	f7ff f94d 	bl	8006bf0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ff91 	bl	8007880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800795e:	e024      	b.n	80079aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <prvProcessTimerOrBlockTask+0x90>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	bf0c      	ite	eq
 8007970:	2301      	moveq	r3, #1
 8007972:	2300      	movne	r3, #0
 8007974:	b2db      	uxtb	r3, r3
 8007976:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <prvProcessTimerOrBlockTask+0x94>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	f7fe fef9 	bl	800677c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800798a:	f7ff f931 	bl	8006bf0 <xTaskResumeAll>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <prvProcessTimerOrBlockTask+0x98>)
 8007996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	f3bf 8f6f 	isb	sy
}
 80079a4:	e001      	b.n	80079aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079a6:	f7ff f923 	bl	8006bf0 <xTaskResumeAll>
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000c14 	.word	0x20000c14
 80079b8:	20000c18 	.word	0x20000c18
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079c8:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <prvGetNextExpireTime+0x44>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bf0c      	ite	eq
 80079d2:	2301      	moveq	r3, #1
 80079d4:	2300      	movne	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e6:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <prvGetNextExpireTime+0x44>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e001      	b.n	80079f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	20000c10 	.word	0x20000c10

08007a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a10:	f7ff f98a 	bl	8006d28 <xTaskGetTickCount>
 8007a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <prvSampleTimeNow+0x3c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d205      	bcs.n	8007a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a20:	f000 f904 	bl	8007c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a32:	4a04      	ldr	r2, [pc, #16]	; (8007a44 <prvSampleTimeNow+0x3c>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a38:	68fb      	ldr	r3, [r7, #12]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000c20 	.word	0x20000c20

08007a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d812      	bhi.n	8007a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d302      	bcc.n	8007a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e01b      	b.n	8007aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a82:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <prvInsertTimerInActiveList+0x7c>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fd fe5c 	bl	800574a <vListInsert>
 8007a92:	e012      	b.n	8007aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d206      	bcs.n	8007aaa <prvInsertTimerInActiveList+0x62>
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d302      	bcc.n	8007aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e007      	b.n	8007aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <prvInsertTimerInActiveList+0x80>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fd fe48 	bl	800574a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aba:	697b      	ldr	r3, [r7, #20]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000c14 	.word	0x20000c14
 8007ac8:	20000c10 	.word	0x20000c10

08007acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	; 0x38
 8007ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ad2:	e099      	b.n	8007c08 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da17      	bge.n	8007b0a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	3304      	adds	r3, #4
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <prvProcessReceivedCommands+0x2e>
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	e7fe      	b.n	8007af8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b00:	6850      	ldr	r0, [r2, #4]
 8007b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b04:	6892      	ldr	r2, [r2, #8]
 8007b06:	4611      	mov	r1, r2
 8007b08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db7a      	blt.n	8007c06 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fe4b 	bl	80057bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b26:	463b      	mov	r3, r7
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff ff6d 	bl	8007a08 <prvSampleTimeNow>
 8007b2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	d868      	bhi.n	8007c08 <prvProcessReceivedCommands+0x13c>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <prvProcessReceivedCommands+0x70>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b65 	.word	0x08007b65
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b65 	.word	0x08007b65
 8007b48:	08007c09 	.word	0x08007c09
 8007b4c:	08007bbf 	.word	0x08007bbf
 8007b50:	08007bf5 	.word	0x08007bf5
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007b65 	.word	0x08007b65
 8007b5c:	08007c09 	.word	0x08007c09
 8007b60:	08007bbf 	.word	0x08007bbf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	18d1      	adds	r1, r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b72:	f7ff ff69 	bl	8007a48 <prvInsertTimerInActiveList>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d045      	beq.n	8007c08 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d13d      	bne.n	8007c08 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	441a      	add	r2, r3
 8007b94:	2300      	movs	r3, #0
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9e:	f7ff fe23 	bl	80077e8 <xTimerGenericCommand>
 8007ba2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d12e      	bne.n	8007c08 <prvProcessReceivedCommands+0x13c>
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	e7fe      	b.n	8007bbc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <prvProcessReceivedCommands+0x114>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e7fe      	b.n	8007bde <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	18d1      	adds	r1, r2, r3
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bee:	f7ff ff2b 	bl	8007a48 <prvInsertTimerInActiveList>
					break;
 8007bf2:	e009      	b.n	8007c08 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d104      	bne.n	8007c08 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c00:	f000 fbb8 	bl	8008374 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c04:	e000      	b.n	8007c08 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c06:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <prvProcessReceivedCommands+0x15c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	1d39      	adds	r1, r7, #4
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe f9b5 	bl	8005f80 <xQueueReceive>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f47f af5b 	bne.w	8007ad4 <prvProcessReceivedCommands+0x8>
	}
}
 8007c1e:	bf00      	nop
 8007c20:	3730      	adds	r7, #48	; 0x30
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000c18 	.word	0x20000c18

08007c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c32:	e044      	b.n	8007cbe <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c34:	4b2b      	ldr	r3, [pc, #172]	; (8007ce4 <prvSwitchTimerLists+0xb8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c3e:	4b29      	ldr	r3, [pc, #164]	; (8007ce4 <prvSwitchTimerLists+0xb8>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fdb5 	bl	80057bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d12d      	bne.n	8007cbe <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4413      	add	r3, r2
 8007c6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d90e      	bls.n	8007c92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c80:	4b18      	ldr	r3, [pc, #96]	; (8007ce4 <prvSwitchTimerLists+0xb8>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fd fd5d 	bl	800574a <vListInsert>
 8007c90:	e015      	b.n	8007cbe <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c92:	2300      	movs	r3, #0
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2300      	movs	r3, #0
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff fda3 	bl	80077e8 <xTimerGenericCommand>
 8007ca2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <prvSwitchTimerLists+0x92>
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	e7fe      	b.n	8007cbc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <prvSwitchTimerLists+0xb8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1b5      	bne.n	8007c34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cc8:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <prvSwitchTimerLists+0xb8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cce:	4b06      	ldr	r3, [pc, #24]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a04      	ldr	r2, [pc, #16]	; (8007ce4 <prvSwitchTimerLists+0xb8>)
 8007cd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cd6:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <prvSwitchTimerLists+0xbc>)
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	6013      	str	r3, [r2, #0]
}
 8007cdc:	bf00      	nop
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000c10 	.word	0x20000c10
 8007ce8:	20000c14 	.word	0x20000c14

08007cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cf2:	f000 f963 	bl	8007fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cf6:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d120      	bne.n	8007d40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cfe:	4814      	ldr	r0, [pc, #80]	; (8007d50 <prvCheckForValidListAndQueue+0x64>)
 8007d00:	f7fd fcd2 	bl	80056a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d04:	4813      	ldr	r0, [pc, #76]	; (8007d54 <prvCheckForValidListAndQueue+0x68>)
 8007d06:	f7fd fccf 	bl	80056a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <prvCheckForValidListAndQueue+0x6c>)
 8007d0c:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <prvCheckForValidListAndQueue+0x64>)
 8007d0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d10:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <prvCheckForValidListAndQueue+0x70>)
 8007d12:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <prvCheckForValidListAndQueue+0x68>)
 8007d14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d16:	2300      	movs	r3, #0
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <prvCheckForValidListAndQueue+0x74>)
 8007d1c:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <prvCheckForValidListAndQueue+0x78>)
 8007d1e:	2110      	movs	r1, #16
 8007d20:	200a      	movs	r0, #10
 8007d22:	f7fd fddd 	bl	80058e0 <xQueueGenericCreateStatic>
 8007d26:	4602      	mov	r2, r0
 8007d28:	4b08      	ldr	r3, [pc, #32]	; (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007d2a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d2c:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	490b      	ldr	r1, [pc, #44]	; (8007d68 <prvCheckForValidListAndQueue+0x7c>)
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fccc 	bl	80066d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d40:	f000 f96a 	bl	8008018 <vPortExitCritical>
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000c18 	.word	0x20000c18
 8007d50:	20000be8 	.word	0x20000be8
 8007d54:	20000bfc 	.word	0x20000bfc
 8007d58:	20000c10 	.word	0x20000c10
 8007d5c:	20000c14 	.word	0x20000c14
 8007d60:	20000cc4 	.word	0x20000cc4
 8007d64:	20000c24 	.word	0x20000c24
 8007d68:	08008650 	.word	0x08008650

08007d6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f023 0201 	bic.w	r2, r3, #1
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d9c:	4a0c      	ldr	r2, [pc, #48]	; (8007dd0 <pxPortInitialiseStack+0x64>)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b14      	subs	r3, #20
 8007da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3b04      	subs	r3, #4
 8007db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f06f 0202 	mvn.w	r2, #2
 8007dba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3b20      	subs	r3, #32
 8007dc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	08007dd5 	.word	0x08007dd5

08007dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <prvTaskExitError+0x50>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de6:	d009      	beq.n	8007dfc <prvTaskExitError+0x28>
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e7fe      	b.n	8007dfa <prvTaskExitError+0x26>
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e0e:	bf00      	nop
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0fc      	beq.n	8007e10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	2000000c 	.word	0x2000000c
	...

08007e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <pxCurrentTCBConst2>)
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	6808      	ldr	r0, [r1, #0]
 8007e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f380 8809 	msr	PSP, r0
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	4770      	bx	lr
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst2>:
 8007e50:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e58:	4808      	ldr	r0, [pc, #32]	; (8007e7c <prvPortStartFirstTask+0x24>)
 8007e5a:	6800      	ldr	r0, [r0, #0]
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f380 8808 	msr	MSP, r0
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f380 8814 	msr	CONTROL, r0
 8007e6a:	b662      	cpsie	i
 8007e6c:	b661      	cpsie	f
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	df00      	svc	0
 8007e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e7a:	bf00      	nop
 8007e7c:	e000ed08 	.word	0xe000ed08

08007e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e86:	4b44      	ldr	r3, [pc, #272]	; (8007f98 <xPortStartScheduler+0x118>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a44      	ldr	r2, [pc, #272]	; (8007f9c <xPortStartScheduler+0x11c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d109      	bne.n	8007ea4 <xPortStartScheduler+0x24>
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	e7fe      	b.n	8007ea2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ea4:	4b3c      	ldr	r3, [pc, #240]	; (8007f98 <xPortStartScheduler+0x118>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a3d      	ldr	r2, [pc, #244]	; (8007fa0 <xPortStartScheduler+0x120>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d109      	bne.n	8007ec2 <xPortStartScheduler+0x42>
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e7fe      	b.n	8007ec0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ec2:	4b38      	ldr	r3, [pc, #224]	; (8007fa4 <xPortStartScheduler+0x124>)
 8007ec4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	22ff      	movs	r2, #255	; 0xff
 8007ed2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	4b30      	ldr	r3, [pc, #192]	; (8007fa8 <xPortStartScheduler+0x128>)
 8007ee8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007eea:	4b30      	ldr	r3, [pc, #192]	; (8007fac <xPortStartScheduler+0x12c>)
 8007eec:	2207      	movs	r2, #7
 8007eee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ef0:	e009      	b.n	8007f06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <xPortStartScheduler+0x12c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	4a2c      	ldr	r2, [pc, #176]	; (8007fac <xPortStartScheduler+0x12c>)
 8007efa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0e:	2b80      	cmp	r3, #128	; 0x80
 8007f10:	d0ef      	beq.n	8007ef2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f12:	4b26      	ldr	r3, [pc, #152]	; (8007fac <xPortStartScheduler+0x12c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1c3 0307 	rsb	r3, r3, #7
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d009      	beq.n	8007f32 <xPortStartScheduler+0xb2>
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60bb      	str	r3, [r7, #8]
 8007f30:	e7fe      	b.n	8007f30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f32:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <xPortStartScheduler+0x12c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <xPortStartScheduler+0x12c>)
 8007f3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f3c:	4b1b      	ldr	r3, [pc, #108]	; (8007fac <xPortStartScheduler+0x12c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f44:	4a19      	ldr	r2, [pc, #100]	; (8007fac <xPortStartScheduler+0x12c>)
 8007f46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f50:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f5c:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a13      	ldr	r2, [pc, #76]	; (8007fb0 <xPortStartScheduler+0x130>)
 8007f62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f68:	f000 f8d6 	bl	8008118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f6c:	4b11      	ldr	r3, [pc, #68]	; (8007fb4 <xPortStartScheduler+0x134>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f72:	f000 f8f5 	bl	8008160 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f76:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a0f      	ldr	r2, [pc, #60]	; (8007fb8 <xPortStartScheduler+0x138>)
 8007f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f82:	f7ff ff69 	bl	8007e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f86:	f7fe ff9d 	bl	8006ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8007f8a:	f7ff ff23 	bl	8007dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed00 	.word	0xe000ed00
 8007f9c:	410fc271 	.word	0x410fc271
 8007fa0:	410fc270 	.word	0x410fc270
 8007fa4:	e000e400 	.word	0xe000e400
 8007fa8:	20000d14 	.word	0x20000d14
 8007fac:	20000d18 	.word	0x20000d18
 8007fb0:	e000ed20 	.word	0xe000ed20
 8007fb4:	2000000c 	.word	0x2000000c
 8007fb8:	e000ef34 	.word	0xe000ef34

08007fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fd4:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <vPortEnterCritical+0x54>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	4a0d      	ldr	r2, [pc, #52]	; (8008010 <vPortEnterCritical+0x54>)
 8007fdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <vPortEnterCritical+0x54>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d10e      	bne.n	8008004 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <vPortEnterCritical+0x58>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <vPortEnterCritical+0x48>
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	e7fe      	b.n	8008002 <vPortEnterCritical+0x46>
	}
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	2000000c 	.word	0x2000000c
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <vPortExitCritical+0x4c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <vPortExitCritical+0x22>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	607b      	str	r3, [r7, #4]
 8008038:	e7fe      	b.n	8008038 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <vPortExitCritical+0x4c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3b01      	subs	r3, #1
 8008040:	4a08      	ldr	r2, [pc, #32]	; (8008064 <vPortExitCritical+0x4c>)
 8008042:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008044:	4b07      	ldr	r3, [pc, #28]	; (8008064 <vPortExitCritical+0x4c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <vPortExitCritical+0x3e>
 800804c:	2300      	movs	r3, #0
 800804e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	2000000c 	.word	0x2000000c
	...

08008070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008070:	f3ef 8009 	mrs	r0, PSP
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <pxCurrentTCBConst>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	f01e 0f10 	tst.w	lr, #16
 8008080:	bf08      	it	eq
 8008082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008094:	f380 8811 	msr	BASEPRI, r0
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f7fe ff10 	bl	8006ec4 <vTaskSwitchContext>
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f380 8811 	msr	BASEPRI, r0
 80080ac:	bc09      	pop	{r0, r3}
 80080ae:	6819      	ldr	r1, [r3, #0]
 80080b0:	6808      	ldr	r0, [r1, #0]
 80080b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b6:	f01e 0f10 	tst.w	lr, #16
 80080ba:	bf08      	it	eq
 80080bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080c0:	f380 8809 	msr	PSP, r0
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst>:
 80080d0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080f0:	f7fe fe2a 	bl	8006d48 <xTaskIncrementTick>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080fa:	4b06      	ldr	r3, [pc, #24]	; (8008114 <SysTick_Handler+0x3c>)
 80080fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	2300      	movs	r3, #0
 8008104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800810c:	bf00      	nop
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	e000ed04 	.word	0xe000ed04

08008118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008118:	b480      	push	{r7}
 800811a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800811c:	4b0b      	ldr	r3, [pc, #44]	; (800814c <vPortSetupTimerInterrupt+0x34>)
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008122:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <vPortSetupTimerInterrupt+0x38>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <vPortSetupTimerInterrupt+0x3c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a0a      	ldr	r2, [pc, #40]	; (8008158 <vPortSetupTimerInterrupt+0x40>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	099b      	lsrs	r3, r3, #6
 8008134:	4a09      	ldr	r2, [pc, #36]	; (800815c <vPortSetupTimerInterrupt+0x44>)
 8008136:	3b01      	subs	r3, #1
 8008138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800813a:	4b04      	ldr	r3, [pc, #16]	; (800814c <vPortSetupTimerInterrupt+0x34>)
 800813c:	2207      	movs	r2, #7
 800813e:	601a      	str	r2, [r3, #0]
}
 8008140:	bf00      	nop
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	e000e010 	.word	0xe000e010
 8008150:	e000e018 	.word	0xe000e018
 8008154:	20000000 	.word	0x20000000
 8008158:	10624dd3 	.word	0x10624dd3
 800815c:	e000e014 	.word	0xe000e014

08008160 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008160:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008170 <vPortEnableVFP+0x10>
 8008164:	6801      	ldr	r1, [r0, #0]
 8008166:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800816a:	6001      	str	r1, [r0, #0]
 800816c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800816e:	bf00      	nop
 8008170:	e000ed88 	.word	0xe000ed88

08008174 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800817a:	f3ef 8305 	mrs	r3, IPSR
 800817e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b0f      	cmp	r3, #15
 8008184:	d913      	bls.n	80081ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008186:	4a16      	ldr	r2, [pc, #88]	; (80081e0 <vPortValidateInterruptPriority+0x6c>)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008190:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <vPortValidateInterruptPriority+0x70>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	7afa      	ldrb	r2, [r7, #11]
 8008196:	429a      	cmp	r2, r3
 8008198:	d209      	bcs.n	80081ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	607b      	str	r3, [r7, #4]
 80081ac:	e7fe      	b.n	80081ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <vPortValidateInterruptPriority+0x74>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <vPortValidateInterruptPriority+0x78>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d909      	bls.n	80081d2 <vPortValidateInterruptPriority+0x5e>
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	e7fe      	b.n	80081d0 <vPortValidateInterruptPriority+0x5c>
	}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e3f0 	.word	0xe000e3f0
 80081e4:	20000d14 	.word	0x20000d14
 80081e8:	e000ed0c 	.word	0xe000ed0c
 80081ec:	20000d18 	.word	0x20000d18

080081f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	; 0x28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081fc:	f7fe fcea 	bl	8006bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008200:	4b57      	ldr	r3, [pc, #348]	; (8008360 <pvPortMalloc+0x170>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008208:	f000 f90c 	bl	8008424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800820c:	4b55      	ldr	r3, [pc, #340]	; (8008364 <pvPortMalloc+0x174>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4013      	ands	r3, r2
 8008214:	2b00      	cmp	r3, #0
 8008216:	f040 808c 	bne.w	8008332 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01c      	beq.n	800825a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008220:	2208      	movs	r2, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f023 0307 	bic.w	r3, r3, #7
 8008238:	3308      	adds	r3, #8
 800823a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	2b00      	cmp	r3, #0
 8008244:	d009      	beq.n	800825a <pvPortMalloc+0x6a>
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e7fe      	b.n	8008258 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d068      	beq.n	8008332 <pvPortMalloc+0x142>
 8008260:	4b41      	ldr	r3, [pc, #260]	; (8008368 <pvPortMalloc+0x178>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	429a      	cmp	r2, r3
 8008268:	d863      	bhi.n	8008332 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800826a:	4b40      	ldr	r3, [pc, #256]	; (800836c <pvPortMalloc+0x17c>)
 800826c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800826e:	4b3f      	ldr	r3, [pc, #252]	; (800836c <pvPortMalloc+0x17c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008274:	e004      	b.n	8008280 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d903      	bls.n	8008292 <pvPortMalloc+0xa2>
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f1      	bne.n	8008276 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008292:	4b33      	ldr	r3, [pc, #204]	; (8008360 <pvPortMalloc+0x170>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008298:	429a      	cmp	r2, r3
 800829a:	d04a      	beq.n	8008332 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2208      	movs	r2, #8
 80082a2:	4413      	add	r3, r2
 80082a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	1ad2      	subs	r2, r2, r3
 80082b6:	2308      	movs	r3, #8
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d91e      	bls.n	80082fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4413      	add	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d009      	beq.n	80082e4 <pvPortMalloc+0xf4>
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	613b      	str	r3, [r7, #16]
 80082e2:	e7fe      	b.n	80082e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	1ad2      	subs	r2, r2, r3
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082f6:	69b8      	ldr	r0, [r7, #24]
 80082f8:	f000 f8f6 	bl	80084e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082fc:	4b1a      	ldr	r3, [pc, #104]	; (8008368 <pvPortMalloc+0x178>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	4a18      	ldr	r2, [pc, #96]	; (8008368 <pvPortMalloc+0x178>)
 8008308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800830a:	4b17      	ldr	r3, [pc, #92]	; (8008368 <pvPortMalloc+0x178>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4b18      	ldr	r3, [pc, #96]	; (8008370 <pvPortMalloc+0x180>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d203      	bcs.n	800831e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008316:	4b14      	ldr	r3, [pc, #80]	; (8008368 <pvPortMalloc+0x178>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a15      	ldr	r2, [pc, #84]	; (8008370 <pvPortMalloc+0x180>)
 800831c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	4b10      	ldr	r3, [pc, #64]	; (8008364 <pvPortMalloc+0x174>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	431a      	orrs	r2, r3
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008332:	f7fe fc5d 	bl	8006bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <pvPortMalloc+0x164>
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e7fe      	b.n	8008352 <pvPortMalloc+0x162>
	return pvReturn;
 8008354:	69fb      	ldr	r3, [r7, #28]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3728      	adds	r7, #40	; 0x28
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20004924 	.word	0x20004924
 8008364:	20004930 	.word	0x20004930
 8008368:	20004928 	.word	0x20004928
 800836c:	2000491c 	.word	0x2000491c
 8008370:	2000492c 	.word	0x2000492c

08008374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d046      	beq.n	8008414 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008386:	2308      	movs	r3, #8
 8008388:	425b      	negs	r3, r3
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	4b20      	ldr	r3, [pc, #128]	; (800841c <vPortFree+0xa8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4013      	ands	r3, r2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <vPortFree+0x42>
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	e7fe      	b.n	80083b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d009      	beq.n	80083d2 <vPortFree+0x5e>
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	60bb      	str	r3, [r7, #8]
 80083d0:	e7fe      	b.n	80083d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <vPortFree+0xa8>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d019      	beq.n	8008414 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d115      	bne.n	8008414 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <vPortFree+0xa8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	43db      	mvns	r3, r3
 80083f2:	401a      	ands	r2, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083f8:	f7fe fbec 	bl	8006bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <vPortFree+0xac>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4413      	add	r3, r2
 8008406:	4a06      	ldr	r2, [pc, #24]	; (8008420 <vPortFree+0xac>)
 8008408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800840a:	6938      	ldr	r0, [r7, #16]
 800840c:	f000 f86c 	bl	80084e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008410:	f7fe fbee 	bl	8006bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008414:	bf00      	nop
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20004930 	.word	0x20004930
 8008420:	20004928 	.word	0x20004928

08008424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800842a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800842e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008430:	4b27      	ldr	r3, [pc, #156]	; (80084d0 <prvHeapInit+0xac>)
 8008432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00c      	beq.n	8008458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3307      	adds	r3, #7
 8008442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0307 	bic.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	4a1f      	ldr	r2, [pc, #124]	; (80084d0 <prvHeapInit+0xac>)
 8008454:	4413      	add	r3, r2
 8008456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800845c:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <prvHeapInit+0xb0>)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <prvHeapInit+0xb0>)
 8008464:	2200      	movs	r2, #0
 8008466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	4413      	add	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008470:	2208      	movs	r2, #8
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f023 0307 	bic.w	r3, r3, #7
 800847e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4a15      	ldr	r2, [pc, #84]	; (80084d8 <prvHeapInit+0xb4>)
 8008484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008486:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <prvHeapInit+0xb4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800848e:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <prvHeapInit+0xb4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084a4:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <prvHeapInit+0xb4>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <prvHeapInit+0xb8>)
 80084b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4a09      	ldr	r2, [pc, #36]	; (80084e0 <prvHeapInit+0xbc>)
 80084ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <prvHeapInit+0xc0>)
 80084be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084c2:	601a      	str	r2, [r3, #0]
}
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	20000d1c 	.word	0x20000d1c
 80084d4:	2000491c 	.word	0x2000491c
 80084d8:	20004924 	.word	0x20004924
 80084dc:	2000492c 	.word	0x2000492c
 80084e0:	20004928 	.word	0x20004928
 80084e4:	20004930 	.word	0x20004930

080084e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084f0:	4b28      	ldr	r3, [pc, #160]	; (8008594 <prvInsertBlockIntoFreeList+0xac>)
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e002      	b.n	80084fc <prvInsertBlockIntoFreeList+0x14>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d8f7      	bhi.n	80084f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	4413      	add	r3, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	429a      	cmp	r2, r3
 8008516:	d108      	bne.n	800852a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	441a      	add	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	441a      	add	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	429a      	cmp	r2, r3
 800853c:	d118      	bne.n	8008570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b15      	ldr	r3, [pc, #84]	; (8008598 <prvInsertBlockIntoFreeList+0xb0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d00d      	beq.n	8008566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	441a      	add	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e008      	b.n	8008578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <prvInsertBlockIntoFreeList+0xb0>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	e003      	b.n	8008578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	429a      	cmp	r2, r3
 800857e:	d002      	beq.n	8008586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	2000491c 	.word	0x2000491c
 8008598:	20004924 	.word	0x20004924

0800859c <__libc_init_array>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4e0d      	ldr	r6, [pc, #52]	; (80085d4 <__libc_init_array+0x38>)
 80085a0:	4c0d      	ldr	r4, [pc, #52]	; (80085d8 <__libc_init_array+0x3c>)
 80085a2:	1ba4      	subs	r4, r4, r6
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	2500      	movs	r5, #0
 80085a8:	42a5      	cmp	r5, r4
 80085aa:	d109      	bne.n	80085c0 <__libc_init_array+0x24>
 80085ac:	4e0b      	ldr	r6, [pc, #44]	; (80085dc <__libc_init_array+0x40>)
 80085ae:	4c0c      	ldr	r4, [pc, #48]	; (80085e0 <__libc_init_array+0x44>)
 80085b0:	f000 f82c 	bl	800860c <_init>
 80085b4:	1ba4      	subs	r4, r4, r6
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	2500      	movs	r5, #0
 80085ba:	42a5      	cmp	r5, r4
 80085bc:	d105      	bne.n	80085ca <__libc_init_array+0x2e>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085c4:	4798      	blx	r3
 80085c6:	3501      	adds	r5, #1
 80085c8:	e7ee      	b.n	80085a8 <__libc_init_array+0xc>
 80085ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085ce:	4798      	blx	r3
 80085d0:	3501      	adds	r5, #1
 80085d2:	e7f2      	b.n	80085ba <__libc_init_array+0x1e>
 80085d4:	080086b4 	.word	0x080086b4
 80085d8:	080086b4 	.word	0x080086b4
 80085dc:	080086b4 	.word	0x080086b4
 80085e0:	080086b8 	.word	0x080086b8

080085e4 <memcpy>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	1e43      	subs	r3, r0, #1
 80085e8:	440a      	add	r2, r1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	d100      	bne.n	80085f0 <memcpy+0xc>
 80085ee:	bd10      	pop	{r4, pc}
 80085f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085f8:	e7f7      	b.n	80085ea <memcpy+0x6>

080085fa <memset>:
 80085fa:	4402      	add	r2, r0
 80085fc:	4603      	mov	r3, r0
 80085fe:	4293      	cmp	r3, r2
 8008600:	d100      	bne.n	8008604 <memset+0xa>
 8008602:	4770      	bx	lr
 8008604:	f803 1b01 	strb.w	r1, [r3], #1
 8008608:	e7f9      	b.n	80085fe <memset+0x4>
	...

0800860c <_init>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr

08008618 <_fini>:
 8008618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861a:	bf00      	nop
 800861c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800861e:	bc08      	pop	{r3}
 8008620:	469e      	mov	lr, r3
 8008622:	4770      	bx	lr
